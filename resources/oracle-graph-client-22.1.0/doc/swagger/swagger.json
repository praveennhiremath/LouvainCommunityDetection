{
  "swagger" : "2.0",
  "info" : {
    "version" : "22.1.1",
    "title" : "Oracle Labs Parallel Graph Analytics (PGX) REST API",
    "license" : {
      "name" : "Copyright (C) 2013 - 2021 Oracle and/or its affiliates. All rights reserved. Use is subject to license terms.",
      "url" : "https://www.oracle.com/technetwork/licenses/standard-license-152015.html"
    }
  },
  "tags" : [ {
    "name" : "Admin Futures"
  }, {
    "name" : "Analyses"
  }, {
    "name" : "CSRF Token"
  }, {
    "name" : "Collection Proxies"
  }, {
    "name" : "Collections"
  }, {
    "name" : "Component Storages"
  }, {
    "name" : "Components Proxies"
  }, {
    "name" : "Edges"
  }, {
    "name" : "EdgesInTable"
  }, {
    "name" : "Frames"
  }, {
    "name" : "Futures"
  }, {
    "name" : "Graphs"
  }, {
    "name" : "Inspection"
  }, {
    "name" : "Map Proxies"
  }, {
    "name" : "Maps"
  }, {
    "name" : "MlModels"
  }, {
    "name" : "PGQL"
  }, {
    "name" : "PGQL Proxies"
  }, {
    "name" : "PGX Version"
  }, {
    "name" : "Path Proxies"
  }, {
    "name" : "Properties"
  }, {
    "name" : "Property Proxies"
  }, {
    "name" : "Scalars"
  }, {
    "name" : "Server Management"
  }, {
    "name" : "Sessions"
  }, {
    "name" : "Vertices"
  }, {
    "name" : "VerticesInTable"
  } ],
  "paths" : {
    "/" : {
      "get" : {
        "summary" : "Get list of Core/Control versions",
        "description" : "",
        "operationId" : "getRootResources",
        "produces" : [ "application/json" ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/control" : {
      "get" : {
        "summary" : "List Control Rest versions",
        "description" : "",
        "operationId" : "getControlVersions",
        "produces" : [ "application/json" ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/control/v1/currentUserName" : {
      "get" : {
        "summary" : "Get the name of the current user",
        "description" : "",
        "operationId" : "getUsername",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/control/v1/currentUserRoles" : {
      "get" : {
        "summary" : "Get the roles of the current user",
        "description" : "",
        "operationId" : "getUserRoles",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/control/v1/currentUserSystemPermissions" : {
      "get" : {
        "summary" : "Get the system permissions of the current user",
        "description" : "",
        "operationId" : "getSystemPermissions",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/control/v1/freeCachedMemory" : {
      "post" : {
        "tags" : [ "Server Management" ],
        "summary" : "release memory of un-used graphs",
        "description" : "cleanup the server ",
        "operationId" : "freeCachedMemory",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CacheStatistics"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/control/v1/futures/x-future-id" : {
      "delete" : {
        "tags" : [ "Admin Futures" ],
        "summary" : "Cancel a future",
        "description" : "Cancel a pending future. This will cause the future to complete exceptionally",
        "operationId" : "cancelAdminFuture",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-future-id",
          "in" : "header",
          "description" : "the future ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        }
      }
    },
    "/control/v1/futures/x-future-id/status" : {
      "get" : {
        "tags" : [ "Admin Futures" ],
        "summary" : "Get the status of a future",
        "description" : "Get the current status of a future",
        "operationId" : "getAdminFutureStatus",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-future-id",
          "in" : "header",
          "description" : "the future ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AsyncStatus"
            }
          },
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/AsyncStatus"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        }
      }
    },
    "/control/v1/futures/x-future-id/value" : {
      "get" : {
        "tags" : [ "Admin Futures" ],
        "summary" : "Get the result of a future",
        "description" : "Get the result of a future. Will block the request if the future is not completed on the server side.",
        "operationId" : "getAdminFuture",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-future-id",
          "in" : "header",
          "description" : "the future ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with json serialized object whose type depends on the type of the future which is requested."
          },
          "201" : {
            "description" : "Created with json serialized object whose type depends on the type of the future which is requested."
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        }
      }
    },
    "/control/v1/graphs" : {
      "get" : {
        "tags" : [ "Inspection" ],
        "summary" : "Get a list of graphs",
        "description" : "Get a list of currently active graphs. Deprecated since 2.7.0. Call /control/v1/serverState instead.",
        "operationId" : "getGraphInfos",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GraphInfo"
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : true
      }
    },
    "/control/v1/graphs/x-graph-name" : {
      "get" : {
        "tags" : [ "Inspection" ],
        "summary" : "Get details about a graph",
        "description" : "Get details about a graph. Deprecated since 2.7.0. Call /control/v1/serverState instead.",
        "operationId" : "getGraphInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-graph-name",
          "in" : "header",
          "description" : "The global name of the graph",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/GraphInfo"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : true
      }
    },
    "/control/v1/isGraphPreloadingDone" : {
      "get" : {
        "tags" : [ "Server Management" ],
        "summary" : "Query whether the PGX server is ready",
        "description" : "",
        "operationId" : "isGraphPreloadingDone",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocking",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/control/v1/isReady" : {
      "get" : {
        "tags" : [ "Server Management" ],
        "summary" : "Query whether the PGX server is ready to accept new requests",
        "description" : "",
        "operationId" : "isReady",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocking",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/control/v1/isRunning" : {
      "get" : {
        "tags" : [ "Server Management" ],
        "summary" : "Query whether the PGX server is running",
        "description" : "",
        "operationId" : "isRunning",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocking",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/control/v1/maxMemory/x-session-id" : {
      "post" : {
        "tags" : [ "Server Management" ],
        "summary" : "Set session memory limit",
        "description" : "Sets the maximum memory limit of the given session",
        "operationId" : "setMaxSessionMemorySize",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-session-id",
          "in" : "header",
          "description" : "The session to apply the max memory limit to.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body specifies the memory limit for the given session.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ControlSessionMaxMemoryRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/control/v1/memoryInfo" : {
      "get" : {
        "tags" : [ "Inspection" ],
        "summary" : "Get the memory info",
        "description" : "this endpoint is deprecated since PGX 2.7.0. Call /control/v1/serverState instead",
        "operationId" : "getMemoryInfo",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/MemoryInfo"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found"
          }
        },
        "deprecated" : true
      }
    },
    "/control/v1/pgxConfig" : {
      "get" : {
        "tags" : [ "Inspection" ],
        "summary" : "Get PGX configuration",
        "description" : "Gets the current PGX server configuration",
        "operationId" : "getPgxConfig",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PgxConfig"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/control/v1/serverState" : {
      "get" : {
        "tags" : [ "Inspection" ],
        "summary" : "Get the current server state",
        "description" : "Gets the state of this PGX server instance.",
        "operationId" : "getServerState",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Prefer",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/JsonNode"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/control/v1/sessions" : {
      "get" : {
        "tags" : [ "Inspection" ],
        "summary" : "List active sessions",
        "description" : "this endpoint is deprecated. Call /control/v1/serverState instead",
        "operationId" : "getSessionInfos",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SessionInfo"
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : true
      }
    },
    "/control/v1/sessions/x-session-id" : {
      "get" : {
        "tags" : [ "Inspection" ],
        "summary" : "Get the session info",
        "description" : "this endpoint is deprecated. Call /control/v1/serverState instead",
        "operationId" : "getSessionInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-session-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SessionInfo"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : true
      },
      "delete" : {
        "tags" : [ "Server Management" ],
        "summary" : "Kill a session",
        "description" : "Kill a session based on the session ID provided.",
        "operationId" : "killSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-session-id",
          "in" : "header",
          "description" : "the session to be killed.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        }
      }
    },
    "/control/v1/sessions/x-session-id/graphs/x-graph-name" : {
      "get" : {
        "tags" : [ "Inspection" ],
        "summary" : "Get details of a session-bound, private graph",
        "description" : "this endpoint is deprecated. Call /control/v1/serverState instead",
        "operationId" : "getSessionBoundGraphInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-session-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "x-graph-name",
          "in" : "header",
          "description" : "the name of the graph",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/GraphInfo"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : true
      }
    },
    "/control/v1/shutdown" : {
      "post" : {
        "tags" : [ "Server Management" ],
        "summary" : "Shut down this PGX instance",
        "description" : "Shuts dow this PGX server instance according to the given parameters",
        "operationId" : "shutdown",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines details for the shutdown request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ControlShutdownRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/control/v1/start" : {
      "post" : {
        "tags" : [ "Server Management" ],
        "summary" : "Start PGX instance",
        "description" : "Starts the PGX server instance",
        "operationId" : "start",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details for starting PGX",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ControlStartRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/control/v1/threadPool/lookup" : {
      "post" : {
        "tags" : [ "Inspection" ],
        "summary" : "Get the thread pool info",
        "description" : "this endpoint is deprecated. Call /control/v1/serverState instead",
        "operationId" : "getThreadPoolInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Holds the parameters needed for a pool request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PoolRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/PoolInfo"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : true
      }
    },
    "/control/v1/unpinGraph" : {
      "post" : {
        "tags" : [ "Server Management" ],
        "summary" : "Unpin a graph",
        "description" : "Unpins a pinned graph.",
        "operationId" : "unpinGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Info about the graph to be unpinned.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UnpinGraphRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "deprecated" : true
      }
    },
    "/control/v1/updatePgxConfig" : {
      "post" : {
        "tags" : [ "Server Management" ],
        "summary" : "Update PGX configuration",
        "description" : "Updates the config of the PGX server instance",
        "operationId" : "updatePgxConfig",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details for replacing the PGX config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ControlConfigUpdateRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/control/{version}" : {
      "get" : {
        "summary" : "Get Control Rest version",
        "description" : "",
        "operationId" : "getControlVersion",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/core" : {
      "get" : {
        "summary" : "List Core Rest versions",
        "description" : "",
        "operationId" : "getCoreVersions",
        "produces" : [ "application/json" ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/core/v1/alterGraph" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Alters a graph",
        "description" : "Alters a graph",
        "operationId" : "alterGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which specifies the request for creating the graph",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlterGraphRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/alterGraphSnapshot" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Alters a graph as a new snapshot",
        "description" : "Alters a graph",
        "operationId" : "alterNewGraphSnaphot",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which specifies the request for creating the graph",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AlterGraphRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/analyses" : {
      "get" : {
        "tags" : [ "Analyses" ],
        "summary" : "Get all available analysis Metadata",
        "description" : "",
        "operationId" : "getAvailableAnalyses",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/CompiledProgramMetaData"
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/analyses/x-aid" : {
      "get" : {
        "tags" : [ "Analyses" ],
        "summary" : "Get specific analysis metadata",
        "description" : "",
        "operationId" : "getAnalysisMetaData",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-aid",
          "in" : "header",
          "description" : "Name of the analysis",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CompiledProgramMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Analyses" ],
        "summary" : "Delete an existing analysis",
        "description" : "",
        "operationId" : "deleteAnalysis",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-aid",
          "in" : "header",
          "description" : "Name of the analysis",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ignoreNotFound",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/analyses/x-aid/run" : {
      "post" : {
        "tags" : [ "Analyses" ],
        "summary" : "Invoke an analysis",
        "description" : "This can be a built-in analysis or an analysis that was created by providing the source code and invoking the create analysis endpoint",
        "operationId" : "runAnalysis",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-aid",
          "in" : "header",
          "description" : "Name of the analysis",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Holds the arguments and the pool type information for an algorithm execution request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RunAnalysisRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/availableAnalysesIds" : {
      "get" : {
        "tags" : [ "Analyses" ],
        "summary" : "Get all available analyses IDs",
        "description" : "",
        "operationId" : "getAvailableAnalysisIds",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/buildGraph" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Build a graph",
        "description" : "Builds a graph",
        "operationId" : "buildGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which specifies the request for creating the graph",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BuildGraphRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/buildGraphSnapshot" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Build a graph snapshot",
        "description" : "Builds a graph",
        "operationId" : "buildNewGraphSnaphot",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which specifies the request for creating the graph",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BuildGraphRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/collectionProxies" : {
      "post" : {
        "tags" : [ "Collection Proxies" ],
        "summary" : "Create a collection proxy.",
        "description" : "The collection proxy allows you to access the members of a collection in a paginated way and also allows point access.",
        "operationId" : "createCollectionProxy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Object holding request information to create a collection proxy",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateCollectionProxyRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/CollectionProxyResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/collectionProxies/x-proxy-id/elements" : {
      "get" : {
        "tags" : [ "Collection Proxies" ],
        "summary" : "Get paginated access to all the elements in the collection.",
        "description" : "",
        "operationId" : "getElements",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "Specifies the proxy. You can get this through the core endpoint.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Parameter that specifies an offset for the list of items",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Parameter that specifies the size of the list.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/collections" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "List all collections for a graph",
        "description" : "",
        "operationId" : "getCollections",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "graphId",
          "in" : "query",
          "description" : "Name of the graph to filter the collections",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "Collections" ],
        "summary" : "Create a collection",
        "description" : "you can also call this method to create a collection from a filter expression or from a component.",
        "operationId" : "createCollection",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which specifies details on how to create the collection.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateCollectionRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/collections/x-collection-name" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "Get a specific collection for a graph",
        "description" : "",
        "operationId" : "getCollection",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-collection-name",
          "in" : "header",
          "description" : "the name of the collection",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "graphId",
          "in" : "query",
          "description" : "Id of the graph to filter the collections",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Collections" ],
        "summary" : "Delete a collection",
        "description" : "",
        "operationId" : "destroyCollection",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-collection-name",
          "in" : "header",
          "description" : "name of the collection",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ignoreNotFound",
          "in" : "query",
          "description" : "if it's equal to true return null if the graph doesn't exist, otherwise throw an exception",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/collections/x-collection-name/clone" : {
      "post" : {
        "tags" : [ "Collections" ],
        "summary" : "Clone a collection to hold vertices/edges of a graph",
        "description" : "The collection gets destroyed once the session gets destroyed or #destroyCollection(String, String, boolean)} is called. As collections can only hold nodes or edges, they also become unusable once the graph the node/edges belong to is destroyed.",
        "operationId" : "cloneCollection",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-collection-name",
          "in" : "header",
          "description" : "name of the collection to be cloned",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "object holding the new name of the collection to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloneCollectionRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/collections/x-collection-name/contains" : {
      "post" : {
        "tags" : [ "Collections" ],
        "summary" : "Checks presence of element in collection",
        "description" : "",
        "operationId" : "containsElement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-collection-name",
          "in" : "header",
          "description" : "name of the collection",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Holds the element whose presence is checked.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainsElementRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/collections/x-collection-name/elements" : {
      "delete" : {
        "tags" : [ "Collections" ],
        "summary" : "Clear a collection",
        "description" : "This will result in an empty collection if successful.",
        "operationId" : "removeAllFromCollection",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-collection-name",
          "in" : "header",
          "description" : "name of the collection",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/collections/x-collection-name/isMutable" : {
      "get" : {
        "tags" : [ "Collections" ],
        "summary" : "Check whether a collection is mutable.",
        "description" : "",
        "operationId" : "isCollectionMutable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-collection-name",
          "in" : "header",
          "description" : "name of the collection",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/collections/x-collection-name/toMutable" : {
      "post" : {
        "tags" : [ "Collections" ],
        "summary" : "Creates a mutable copy of a collection to hold vertices/edges of a graph",
        "description" : "The collection gets destroyed once the session gets destroyed or #destroyCollection(String, String, boolean)} is called. As collections can only hold nodes or edges, they also become unusable once the graph the node/edges belong to is destroyed.",
        "operationId" : "toMutableCollection",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-collection-name",
          "in" : "header",
          "description" : "name of the collection",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "object holding the new name of the collection to be created (if null, a name is generated)",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloneCollectionRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/compileAnalysis" : {
      "post" : {
        "tags" : [ "Analyses" ],
        "summary" : "Create a new analysis",
        "description" : "Create a new analysis, based on source code that gets compiled and then registered as an analysis which can be invoked on a graph.",
        "operationId" : "createAnalysis",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which specifies the new analysis, including the source code to be compiled.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateAnalysisRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/CompilationResult"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/componentStorages/x-component-storage-name" : {
      "delete" : {
        "tags" : [ "Component Storages" ],
        "summary" : "Delete a componentStorage collection",
        "description" : "",
        "operationId" : "destroyComponentStorage",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-component-storage-name",
          "in" : "header",
          "description" : "vertex or edge collection name to be destroyed.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ignoreNotFound",
          "in" : "query",
          "description" : "if it's equal to true return null if the componentStorage doesn't exist, otherwise throw an exception",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/componentStorages/x-component-storage-name/components/x-id/contains" : {
      "post" : {
        "tags" : [ "Component Storages" ],
        "summary" : "Check if a component contains a given element",
        "description" : "returns a Boolean wrapped in an entity wrapper",
        "operationId" : "componentContainsElement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-component-storage-name",
          "in" : "header",
          "description" : "the name of the ComponentStorage the component is part of.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-id",
          "in" : "header",
          "description" : "Id of a node identifying the component it belongs to and from which the collection is extracted",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Holds the element whose presence is checked.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContainsElementRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/componentsProxies" : {
      "post" : {
        "tags" : [ "Components Proxies" ],
        "summary" : "Create a components proxy",
        "description" : "It allows you to access the components of a graph. Components are created based on the property you specify and limited by the numComponents parameter.",
        "operationId" : "createComponentsProxy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Object holding request information to create a components proxy",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateComponentsProxyRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/ComponentsProxyResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/componentsProxies/x-proxy-id/componentIds/x-node" : {
      "get" : {
        "tags" : [ "Components Proxies" ],
        "summary" : "Get one specific component",
        "description" : "Get one specific component, based on its component id",
        "operationId" : "getComponentIdForNode",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "Specifies the proxy. You can get this through the core endpoint.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-node",
          "in" : "header",
          "description" : "The node to request the component from.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "nodeWrapped",
          "in" : "query",
          "description" : "is the vertex wrapped",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "nodeType",
          "in" : "query",
          "description" : "the Id type for the entity we are looking for (please respect the case)",
          "required" : true,
          "type" : "string",
          "enum" : [ "INTEGER", "STRING", "LONG" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ComponentsProxyResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/createFrameBuilder" : {
      "post" : {
        "tags" : [ "Frames" ],
        "summary" : "Create a frame builder",
        "description" : "The frame builder will only be server-side.",
        "operationId" : "createFrameBuilder",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "specifies the location of the graph",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Create-Frame-Builder-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/PgxId"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/createGraphFromFrames" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Create a graph from frames",
        "description" : "Create a session private grpah with the given frames",
        "operationId" : "createGraphFromFrames",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which holds the information how the graph should be created from the frames",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GraphFromFramesRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/deepWalkMlModels" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Create a DeepWalk model",
        "description" : "Create a DeepWalk model in current session",
        "operationId" : "createDeepWalkModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the deepwalk model creation request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Create-DeepWalkModel-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/DeepWalkModelMetadata"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/deepWalkMlModels/x-model-name/computeSimilars" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Compute similars according to a deepwalk model",
        "description" : "Compute similars according to a deepwalk model in current session",
        "operationId" : "computeSimilarsDeepWalkModelRequest",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the deepwalk model to use",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the compute similars request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeSimilars-MlModel-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Computed",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/deepWalkMlModels/x-model-name/computeSimilarsBatch" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Compute similars according to a deepwalk model (batched variant)",
        "description" : "Compute similars according to a deepwalk model  (batched variant) in current session",
        "operationId" : "computeSimilarsBatchedDeepWalkModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the deepwalk model to use",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the compute similars request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeSimilarsBatched-MlModel-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Computed",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/deepWalkMlModels/x-model-name/fit" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Train a DeepWalkModel",
        "description" : "Train a DeepWalkModel from the specified session",
        "operationId" : "fitDeepWalkModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the deepwalk model to train",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the compute mlmodel request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Compute-MlModel-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/deepWalkMlModels/x-model-name/trainedVertexVectors" : {
      "get" : {
        "tags" : [ "MlModels" ],
        "summary" : "Fetch the vertex vectors of a DeepWalkModel",
        "description" : "Fetch the vertex vectors of a DeepWalkModel",
        "operationId" : "getTrainedVertexVectorsDeepWalkModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the deepwalk model in which to fetch the vertex vectors",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/describe" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Describe a graph",
        "description" : "The PGX server will create a configuration for the graph from the location you specified, which is part of the DescribeGraphRequest json payload.",
        "operationId" : "describeGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "specifies the location of the graph",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DescribeGraphRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/GraphConfig"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/describeFrame" : {
      "post" : {
        "tags" : [ "Frames" ],
        "summary" : "Describe a frame",
        "description" : "The PGX server will create a configuration for the frame from the location you specified, which is part of the DescribeFrameRequest json payload.",
        "operationId" : "describeFrame",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "specifies the location of the graph",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DescribeFrameRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/GraphConfig"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/executionEnvironment" : {
      "get" : {
        "tags" : [ "Sessions" ],
        "summary" : "Get the value for an execution environment field",
        "description" : "",
        "operationId" : "getExecutionEnvironment",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "poolType",
          "in" : "query",
          "description" : "The pool for which to look up the value of the execution environment field.",
          "required" : true,
          "type" : "string",
          "enum" : [ "SERVER_THREAD", "FAST_TRACK_ANALYSIS_POOL", "ANALYSIS_POOL", "IO_POOL" ]
        }, {
          "name" : "field",
          "in" : "query",
          "description" : "The name of the execution environment field.",
          "required" : true,
          "type" : "string",
          "enum" : [ "NUM_THREADS_PER_TASK", "WEIGHT", "PRIORITY", "MAX_NUM_THREADS", "UPDATE_CONSISTENCY_MODEL", "ALLOW_MULTIPLE_CONCURRENT_TASKS" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/executionEnvironment/update" : {
      "post" : {
        "tags" : [ "Sessions" ],
        "summary" : "Update an execution environment parameter",
        "description" : "",
        "operationId" : "updateExecutionEnvironment",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The body defines the execution environment parameters to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ExecutionEnvironmentUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/frameBuilders/x-frame-builder-id" : {
      "delete" : {
        "tags" : [ "Frames" ],
        "summary" : "Destroy a frame builder",
        "description" : "PgxServer frame builder will be destroyed, including its data.",
        "operationId" : "destroyFrameBuilder",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-frame-builder-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/frameBuilders/x-frame-builder-id/build" : {
      "post" : {
        "tags" : [ "Frames" ],
        "summary" : "Build a frame from a frame builder",
        "description" : "A frame will be built.",
        "operationId" : "buildFrame",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-frame-builder-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "specifies the location of the graph",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Build-Frame-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/frameBuilders/x-frame-builder-id/rows" : {
      "post" : {
        "tags" : [ "Frames" ],
        "summary" : "Add rows to a frame builder",
        "description" : "The PGX server will add rows to a frame builder.",
        "operationId" : "addRowsToFrameBuilder",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-frame-builder-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "specifies the location of the graph",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Add-Rows-To-Frame-Builder-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/frames/join" : {
      "post" : {
        "tags" : [ "Frames" ],
        "summary" : "Joins two frames",
        "description" : "Creates a new frame by joining the rows of the two input frames",
        "operationId" : "joinFrames",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "object that holds information on the frames to join",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/JoinFramesRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/frames/union" : {
      "post" : {
        "tags" : [ "Frames" ],
        "summary" : "Unions a set of frames",
        "description" : "Creates a new frame by concatenating the rows of the input frames",
        "operationId" : "unionFrames",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "object that holds information on the frames to union",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UnionFramesRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/frames/x-frame-id" : {
      "delete" : {
        "tags" : [ "Frames" ],
        "summary" : "Delete a frame",
        "description" : "Deletes a specific loaded frame in current session",
        "operationId" : "deleteFrame",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-frame-id",
          "in" : "header",
          "description" : "the name of the frame whose result should be deleted",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/frames/x-frame-id/count" : {
      "get" : {
        "tags" : [ "Frames" ],
        "summary" : "Retrieve the number of rows in a frame",
        "description" : "Retrieves the number of rows in a frame",
        "operationId" : "frameCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-frame-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/frames/x-frame-id/extractHead" : {
      "post" : {
        "tags" : [ "Frames" ],
        "summary" : "Extract the first rows of a frame",
        "description" : "Retrieves the first rows of a frame",
        "operationId" : "frameHead",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-frame-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "object that holds information on how many rows to extract",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FrameExtractionRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/frames/x-frame-id/extractTail" : {
      "post" : {
        "tags" : [ "Frames" ],
        "summary" : "Extract the last rows of a frame",
        "description" : "Retrieves the last rows of a frame",
        "operationId" : "frameTail",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-frame-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "object that holds information on how many rows to extract",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FrameExtractionRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/frames/x-frame-id/flatten" : {
      "post" : {
        "tags" : [ "Frames" ],
        "summary" : "Flatten a frame",
        "description" : "Flattens the vector columns of a frame",
        "operationId" : "flattenFrame",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-frame-id",
          "in" : "header",
          "description" : "the name of the frame that should be flattened",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "object that holds information on how to flatten the frame",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FlattenFrameRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/frames/x-frame-id/pgqlResultSet" : {
      "get" : {
        "tags" : [ "Frames" ],
        "summary" : "Convert a frame into a PGQL result set",
        "description" : "Convert a frame into a PGQL result set",
        "operationId" : "frameToPgqlResultSet",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-frame-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PgqlResultSetProxy"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/frames/x-frame-id/print" : {
      "post" : {
        "tags" : [ "Frames" ],
        "summary" : "Build a textual representation of the frame",
        "description" : "Builds a textual representation of the frame with the specified number of rows and offset",
        "operationId" : "printFrame",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-frame-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "object that holds information on how to build the textual representation",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FramePrintingRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/frames/x-frame-id/select" : {
      "post" : {
        "tags" : [ "Frames" ],
        "summary" : "Select frame columns",
        "description" : "Creates a new frame by selecting the columns of an existing frame through a column mapping",
        "operationId" : "selectFrame",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-frame-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "object that holds information on where to store the frame",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SelectFrameRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/frames/x-frame-id/store" : {
      "post" : {
        "tags" : [ "Frames" ],
        "summary" : "Store a frame",
        "description" : "The PGX server will store the frame to a location specified in the StoreFrameRequest json payload. The server needs to have access to the resource where you want to store the frame to.",
        "operationId" : "storeFrame",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-frame-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "object that holds information on where to store the frame",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/StoreFrameRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/futures/x-future-id" : {
      "delete" : {
        "tags" : [ "Futures" ],
        "summary" : "Cancel a future",
        "description" : "Cancel a pending future. This will cause the future to complete exceptionally",
        "operationId" : "cancelFuture",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-future-id",
          "in" : "header",
          "description" : "the future ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/futures/x-future-id/status" : {
      "get" : {
        "tags" : [ "Futures" ],
        "summary" : "Get the status of a future",
        "description" : "Get the current status of a future",
        "operationId" : "getFutureStatus",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-future-id",
          "in" : "header",
          "description" : "the future ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AsyncStatus"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/futures/x-future-id/value" : {
      "get" : {
        "tags" : [ "Futures" ],
        "summary" : "Get the result of a future",
        "description" : "Get the result of a future. Will block the request if the future is not completed on the server side.",
        "operationId" : "getFuture",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-future-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK with json serialized object whose type depends on the type of the future which is requested."
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/getGraphByName" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Get a specific graph result by name",
        "description" : "Gets a specific loaded graph in current session by name",
        "operationId" : "getGraphResultByName",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the information to get the graph from",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GetGraphByNameRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphNames/x-namespace-id" : {
      "get" : {
        "tags" : [ "Graphs" ],
        "summary" : "List graph names",
        "description" : "Gets a list of graph names in the given namespaceId",
        "operationId" : "getGraphNames",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-namespace-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Graph"
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphWiseMlModels" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Create a Supervised GraphWise model",
        "description" : "Create a Supervised GraphWise model in current session",
        "operationId" : "createSupervisedGraphWiseModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the graphwise model creation request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Create-SupervisedGraphWiseModel-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/SupervisedGraphWiseModelMetadata"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/graphWiseMlModels/x-model-name/explain" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Infer and explain with a GraphWise model",
        "description" : "Infer with a GraphWise model on provided vertices",
        "operationId" : "explainGraphWiseModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the graphwise model to infer with",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the explanation request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GraphWise-Inference-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/graphWiseMlModels/x-model-name/fit" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Train a SupervisedGraphWise model",
        "description" : "Train a SupervisedGraphWise model from the specified session",
        "operationId" : "fitSupervisedGraphWiseModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the graphwise model to train",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the compute mlmodel request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Compute-MlModel-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/graphWiseMlModels/x-model-name/infer" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Infer with a Supervised GraphWise model",
        "description" : "Infer with a Supervised GraphWise model on provided vertices",
        "operationId" : "inferSupervisedGraphWiseModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the graphwise model to infer with",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the inference request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SupervisedGraphWise-Inference-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/graphs" : {
      "get" : {
        "tags" : [ "Graphs" ],
        "summary" : "List loaded graphs",
        "description" : "Gets a list of loaded graphs in current session",
        "operationId" : "getGraphs",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Graph"
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id" : {
      "get" : {
        "tags" : [ "Graphs" ],
        "summary" : "Get a specific graph result",
        "description" : "Gets a specific loaded graph in current session",
        "operationId" : "getGraphResult",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "the name of the graph whose result should be fetched",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Graphs" ],
        "summary" : "Delete a graph",
        "description" : "Deletes a specific loaded graph in current session",
        "operationId" : "deleteGraph",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "the name of the graph whose result should be deleted",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ignoreNotFound",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "retention",
          "in" : "query",
          "description" : "determines if we should destroy the graph or just remove the pointer",
          "required" : false,
          "type" : "string",
          "default" : "DESTROY_IF_NOT_USED",
          "enum" : [ "KEEP_GRAPH", "DESTROY_IF_NOT_USED" ]
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/beta/expandGraph" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Expand a graph with additional data",
        "description" : "This will create a new graph which contains data from the old graph with additional data merged into it",
        "operationId" : "expandGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the base graph for the expansion.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which specifies how the graph expanded.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GraphExpansionRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/bipartiteSubgraphs" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Create a bipartite subgraph",
        "description" : "Create a bipartite subgraph based on a graph and a left set node list.",
        "operationId" : "createBipartiteSubgraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Specifies the source graph.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which holds the information how the subgraph should be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateBipartiteSubgraphRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/clone" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Clone a graph",
        "description" : "Clone a graph which is loaded in memory.",
        "operationId" : "cloneGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Specifies the source graph.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which holds the information how the graph should be cloned.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MutateRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/combineProperties" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Combine graph properties",
        "description" : "Combine same type-scalar properties into a new Vector Property",
        "operationId" : "combineProperty",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "id of the graph property belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the properties combining request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CombinePropertyRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/computePath" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Create an AllPath Proxy",
        "description" : "Create an AllPath Proxy. The path proxy gives access to a path, which can be a result of an algorithm for example.",
        "operationId" : "getPathProxy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "the id of the graph",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/SerializedPathProxy"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/currentUserPermission" : {
      "get" : {
        "tags" : [ "Graphs" ],
        "summary" : "Get the permission of the current user",
        "description" : "",
        "operationId" : "getPermission",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "id of the graph",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/edges/x-edge-id" : {
      "get" : {
        "tags" : [ "Edges" ],
        "summary" : "Get a specific edge",
        "description" : "",
        "operationId" : "getEdge",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "idType",
          "in" : "query",
          "description" : "the Id type for the entity we are looking for (please respect the case)",
          "required" : true,
          "type" : "string",
          "enum" : [ "STRING", "LONG" ]
        }, {
          "name" : "x-edge-id",
          "in" : "header",
          "description" : "string key of the edge",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Edge"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/edges/x-edge-id/label" : {
      "get" : {
        "tags" : [ "Edges" ],
        "summary" : "Get the label of a given edge",
        "description" : "",
        "operationId" : "getEdgeLabel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-edge-id",
          "in" : "header",
          "description" : "string key of the edge",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "idType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        }, {
          "name" : "keyWrapped",
          "in" : "query",
          "description" : "indicates if the key is wrapped",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/EdgeLabel"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/edges/x-edge-id/vertex" : {
      "get" : {
        "tags" : [ "Edges" ],
        "summary" : "Get a vertex from an edge",
        "description" : "",
        "operationId" : "getVertexFromEdge",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-edge-id",
          "in" : "header",
          "description" : "string key of the edge",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "Incoming or Outgoing",
          "required" : true,
          "type" : "string",
          "enum" : [ "INCOMING", "OUTGOING", "BOTH" ]
        }, {
          "name" : "wrapped",
          "in" : "query",
          "description" : "is the edge wrapped",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Vertex"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/exists" : {
      "get" : {
        "tags" : [ "Graphs" ],
        "summary" : "Check if a node/edge exists",
        "description" : "",
        "operationId" : "exists",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "entityType",
          "in" : "query",
          "description" : "the entity type (EDGE/VERTEX) (please respect the case)",
          "required" : true,
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE" ]
        }, {
          "name" : "idType",
          "in" : "query",
          "description" : "the Id type for the entity we are looking for (please respect the case)",
          "required" : true,
          "type" : "string",
          "enum" : [ "INTEGER", "STRING", "LONG" ]
        }, {
          "name" : "key",
          "in" : "query",
          "description" : "String key of the entity",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/fromFilterSubgraphs" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Create a subgraph from filter",
        "description" : "Create a subgraph based on filter expression selecting edges based on a certain predicate.",
        "operationId" : "createSubgraphFromFilter",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Specifies the source graph.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which holds the information how the subgraph should be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateSubgraphFromFilterRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/grantPermission" : {
      "put" : {
        "tags" : [ "Graphs" ],
        "summary" : "Grant permission on the graph",
        "description" : "",
        "operationId" : "grantPermission",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "id of the graph",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body contains details on how to grant the permission",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GraphPermissionRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/isFresh" : {
      "get" : {
        "tags" : [ "Graphs" ],
        "summary" : "Check whether the graph is fresh",
        "description" : "Check whether the graph is fresh (no changes on the source of the graph since we have loaded the graph into memory)",
        "operationId" : "graphIsFresh",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/isPinned" : {
      "get" : {
        "tags" : [ "Graphs" ],
        "summary" : "Check if a graph or snapshot has been pinned.",
        "description" : "",
        "operationId" : "graphIsPinned",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "id of the graph",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pinTarget",
          "in" : "query",
          "description" : "what entity to check whether its been pinned",
          "required" : false,
          "type" : "string",
          "enum" : [ "GRAPH" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/isPublished" : {
      "get" : {
        "tags" : [ "Graphs" ],
        "summary" : "Check if a graph has been published.",
        "description" : "",
        "operationId" : "graphIsPublished",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "withSnapshots",
          "in" : "query",
          "description" : "The body of the request specifies whether to request if snapshots also are published",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/name" : {
      "put" : {
        "tags" : [ "Graphs" ],
        "summary" : "Rename a graph",
        "description" : "The new graph name needs to be unique for the PGX instance",
        "operationId" : "renameGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Name of the graph",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body contains details on how the graph should be renamed",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RenameGraphRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/pin" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Pins a graph or a specific snapshot",
        "description" : "",
        "operationId" : "changePinningState",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "id of the graph",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the body of the request specifies details on how to pin the graph",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PinGraphRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/properties" : {
      "post" : {
        "tags" : [ "Properties" ],
        "summary" : "Create a property",
        "description" : "Create either a node property or edge property on the graph you specify.",
        "operationId" : "createProperty",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which holds the information what kind of property should be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreatePropertyRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/properties/x-property-name" : {
      "delete" : {
        "tags" : [ "Properties" ],
        "summary" : "Delete a property",
        "description" : "After this call the property will not be accessible any more and the memory will be garbage collected eventually.",
        "operationId" : "deleteProperty",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-property-name",
          "in" : "header",
          "description" : "ID of the property.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "entityType",
          "in" : "query",
          "description" : "Specify whether the property name is of a node or edge property. If your graph has an edge property and a node property with the same name, you need this to distinguish which one to to choose",
          "required" : true,
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE" ]
        }, {
          "name" : "ignoreNotFound",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/properties/x-property-name/clone" : {
      "post" : {
        "tags" : [ "Properties" ],
        "summary" : "Clone a property",
        "description" : "",
        "operationId" : "cloneProperty",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-property-name",
          "in" : "header",
          "description" : "ID of the property.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Holds the parameters for a clone property request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MovePropertyRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/properties/x-property-name/expand" : {
      "post" : {
        "tags" : [ "Properties" ],
        "summary" : "Expand a vector property",
        "description" : "",
        "operationId" : "expandProperty",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-property-name",
          "in" : "header",
          "description" : "ID of the property.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Holds the parameters for a expand property request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ExpandPropertyRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Property"
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/properties/x-property-name/fillValue" : {
      "put" : {
        "tags" : [ "Properties" ],
        "summary" : "Fill a property with values",
        "description" : "",
        "operationId" : "fillProperty",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-property-name",
          "in" : "header",
          "description" : "ID of the property.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/properties/x-property-name/isPublished" : {
      "get" : {
        "tags" : [ "Properties" ],
        "summary" : "Check if property is published",
        "description" : "",
        "operationId" : "propertyIsPublished",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-property-name",
          "in" : "header",
          "description" : "ID of the property.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "entityType",
          "in" : "query",
          "description" : "Specify whether the property name is of a node or edge property. If your graph has an edge property and a node property with the same name, you need this to distinguish which one to to choose",
          "required" : true,
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/properties/x-property-name/name" : {
      "put" : {
        "tags" : [ "Properties" ],
        "summary" : "Rename a property",
        "description" : "",
        "operationId" : "renameProperty",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-property-name",
          "in" : "header",
          "description" : "ID of the property.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which specifies details on how the property should be renamed.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MovePropertyRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/properties/x-property-name/publish" : {
      "post" : {
        "tags" : [ "Properties" ],
        "summary" : "Publish a property",
        "description" : "Publish a property so It can be shared between sessions.",
        "operationId" : "publishProperty",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-property-name",
          "in" : "header",
          "description" : "ID of the property.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "entityType",
          "in" : "query",
          "description" : "Specify whether the property name is of a node or edge property. If your graph has an edge property and a node property with the same name, you need this to distinguish which one to to choose",
          "required" : true,
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE" ]
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Holds the CSRF parameter for a request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UnsafeHttpMethodRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/properties/x-property-name/values/x-property-key" : {
      "get" : {
        "tags" : [ "Properties" ],
        "summary" : "Get the value of a property",
        "description" : "",
        "operationId" : "getPropertyValue",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-property-name",
          "in" : "header",
          "description" : "ID of the property.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "entityType",
          "in" : "query",
          "description" : "Specify whether the property name is of a node or edge property. If your graph has an edge property and a node property with the same name, you need this to distinguish which one to to choose",
          "required" : true,
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE" ]
        }, {
          "name" : "x-property-key",
          "in" : "header",
          "description" : "key of the node/edge we want to get the property value for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "idType",
          "in" : "query",
          "description" : "the Id type for the entity we are looking for (please respect the case)",
          "required" : true,
          "type" : "string",
          "enum" : [ "INTEGER", "STRING", "LONG" ]
        }, {
          "name" : "keyWrapped",
          "in" : "query",
          "description" : "indicates if the key is wrapped",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PropertyValue"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/publish" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Publish a graph so it can be shared between sessions",
        "description" : "",
        "operationId" : "publish",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The body of the request specifies details on how to publish the graph",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PublishGraphRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/randomEntity" : {
      "get" : {
        "tags" : [ "Graphs" ],
        "summary" : "Get random entity",
        "description" : "Get a random entity (vertex or edge) key of a graph.",
        "operationId" : "getRandomEntity",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "the id of the graph",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "entityType",
          "in" : "query",
          "description" : "the entity type (EDGE/VERTEX) (please respect the case)",
          "required" : true,
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Edge"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/refresh" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Checkout the newest Snapshot of a graph",
        "description" : "his method compares the latest snapshot available in memory of the given graph against the version at the data source. If the latest snapshot is fresh, the given graph name will point to the latest snapshot once this method completes. If the latest snapshot is fresh and the given graph does already point to the latest snapshot, this method is doing nothing. If the latest snapshot is *not* fresh, a new snapshot will be loaded into memory and the given graph name will point to that new snapshot once this method completes.",
        "operationId" : "refresh",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "Session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Specifies the graph which should be refreshed. Must be a valid graph name in this session.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "in case latest snapshot is not fresh and {@link PgxConfig#getMaxSnapshotCount()} is reached,completion of this request is blocked until a free spot becomes available again rather than throwing an exception",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RefreshGraphRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/revokePermission" : {
      "put" : {
        "tags" : [ "Graphs" ],
        "summary" : "Revoke permissions on the graph",
        "description" : "",
        "operationId" : "revokePermission",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "id of the graph",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body contains details on how to revoke the permission",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GraphPermissionRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/simplify" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Simplify a graph",
        "description" : "This creates a simplified version of the graph (session private).",
        "operationId" : "simplifyGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Specifies the source graph which should be undirected",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which holds the information how the graph should be simplified and how the new graph should be named",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MutateGraphRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/snapshots" : {
      "get" : {
        "tags" : [ "Graphs" ],
        "summary" : "List available Snapshots by name",
        "description" : "Get a list of available in-memory snapshots from the graph name",
        "operationId" : "getAvailableSnapshotsByName",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "the name of the graph to get the snapshots of",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GraphMetaData"
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/snapshots/x-creation-ts" : {
      "get" : {
        "tags" : [ "Graphs" ],
        "summary" : "Get a specific Snapshot",
        "description" : "Get a specific snapshot. You can call the checkout method to jump back and forth in time between various snapshots of the same graph. ",
        "operationId" : "getAvailableSnapshot",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "the name of the graph currently pointing to a different snapshot of the same graph. After this",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-creation-ts",
          "in" : "header",
          "description" : "creation timestamp identifying the snapshot of the graph to be checked out",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/GraphMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/snapshots/x-creation-ts/checkout" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Checkout a specific Snapshot",
        "description" : "Checkout a specific snapshot. You can call this method to jump back and forth in time between various snapshots of the same graph. ",
        "operationId" : "checkout",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-creation-ts",
          "in" : "header",
          "description" : "creation timestamp identifying the snapshot of the graph to be checked out",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "the name of the graph currently pointing to a different snapshot of the same graph. After this",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/sortByDegree" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Sort a graph by degree",
        "description" : "This will create a new graph which node keys are sorted by degree of the node.",
        "operationId" : "sortByDegree",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph to be sorted.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which specifies how the graph should be sorted.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SortByDegreeRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/sparsifiedSubgraphs" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Create a sparsified subgraph",
        "description" : "Create a sparsified subgraph from a source graph.",
        "operationId" : "createSparsifiedSubgraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Specifies the source graph.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which holds the information how the subgraph should be created.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateSparsifiedSubgraphRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/store" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Store a graph",
        "description" : "The PGX server will store the graph to a location specified in the StoreGraphRequest json payload. The server needs to have access to the resource where you want to store the graph to.",
        "operationId" : "storeGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "object that holds information on where to store the graph",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/StoreGraphRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/tables/x-table-name/edges/x-edge-id" : {
      "get" : {
        "tags" : [ "EdgesInTable" ],
        "summary" : "Get a specific edge",
        "description" : "",
        "operationId" : "getEdgeFromKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Name of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-table-name",
          "in" : "header",
          "description" : "name of the table",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-edge-id",
          "in" : "header",
          "description" : "string key of the edge",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Edge"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/tables/x-table-name/vertices/x-vertex-id" : {
      "get" : {
        "tags" : [ "VerticesInTable" ],
        "summary" : "Get a specific vertex",
        "description" : "",
        "operationId" : "getVertex",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "id of the graph",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-table-name",
          "in" : "header",
          "description" : "name of the table",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "idType",
          "in" : "query",
          "description" : "the Id type for the entity we are looking for (please respect the case)",
          "required" : true,
          "type" : "string",
          "enum" : [ "INTEGER", "STRING", "LONG" ]
        }, {
          "name" : "x-vertex-id",
          "in" : "header",
          "description" : "string key of the vertex",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Vertex"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/transpose" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Transpose a graph",
        "description" : "This creates a transposed version of the graph (session private).",
        "operationId" : "transposeGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Specifies the source graph which should be transposed",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which holds the information how the graph should be transposed and how the new graph should be named",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MutateGraphRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/undirect" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Create an undirected graph ",
        "description" : "Create an undirected graph (session private) which represents the undirected version of the input graph.",
        "operationId" : "createUndirectedGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Specifies the source graph which should be undirected",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which holds the information how the graph should be undirected and how the new graph should be named.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MutateGraphRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/vertices/x-vertex-id" : {
      "get" : {
        "tags" : [ "Vertices" ],
        "summary" : "Get a specific vertex",
        "description" : "",
        "operationId" : "getVertexFromKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "id of the graph",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "idType",
          "in" : "query",
          "description" : "the Id type for the entity we are looking for (please respect the case)",
          "required" : true,
          "type" : "string",
          "enum" : [ "INTEGER", "STRING", "LONG" ]
        }, {
          "name" : "x-vertex-id",
          "in" : "header",
          "description" : "string key of the vertex",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Vertex"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/vertices/x-vertex-id/connectedEdges" : {
      "get" : {
        "tags" : [ "Vertices" ],
        "summary" : "List the connected edges to a vertex",
        "description" : "Get all the Edges according to the selected direction",
        "operationId" : "getEdges",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "id of the graph",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-vertex-id",
          "in" : "header",
          "description" : "string key of the vertex",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "Incoming or Outgoing",
          "required" : true,
          "type" : "string",
          "enum" : [ "INCOMING", "OUTGOING", "BOTH" ]
        }, {
          "name" : "wrapped",
          "in" : "query",
          "description" : "indicate if the vertex is wrapped in a Vertex",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Edge"
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/vertices/x-vertex-id/edgeCount" : {
      "get" : {
        "tags" : [ "Vertices" ],
        "summary" : "Get the out edge count",
        "description" : "Gets the out edge count according to the selected direction",
        "operationId" : "getEdgeCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "id of the graph",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-vertex-id",
          "in" : "header",
          "description" : "string key of the vertex",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/vertices/x-vertex-id/labelsSet" : {
      "get" : {
        "tags" : [ "Vertices" ],
        "summary" : "Get vertex Labels",
        "description" : "Get the labels of the given vertex.",
        "operationId" : "getVertexLabels",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "Id of the graph.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-vertex-id",
          "in" : "header",
          "description" : "string key of the vertex",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "idType",
          "in" : "query",
          "description" : "the Id type for the entity we are looking for (please respect the case)",
          "required" : true,
          "type" : "string",
          "enum" : [ "INTEGER", "STRING", "LONG" ]
        }, {
          "name" : "keyWrapped",
          "in" : "query",
          "description" : "indicates if the key is wrapped",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VertexLabels"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/graphs/x-graph-id/vertices/x-vertex-id/neighbors" : {
      "get" : {
        "tags" : [ "Vertices" ],
        "summary" : "List vertex neighbors",
        "description" : "Get all the neighbors nodes according to the selected direction",
        "operationId" : "getNeighbors",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "id of the graph",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-vertex-id",
          "in" : "header",
          "description" : "string key of the vertex",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "Incoming or Outgoing",
          "required" : true,
          "type" : "string",
          "enum" : [ "INCOMING", "OUTGOING", "BOTH" ]
        }, {
          "name" : "idType",
          "in" : "query",
          "description" : "the Id type for the entity we are looking for (please respect the case)",
          "required" : true,
          "type" : "string",
          "enum" : [ "INTEGER", "STRING", "LONG" ]
        }, {
          "name" : "wrapped",
          "in" : "query",
          "description" : "indicate if the vertex is wrapped in a Vertex",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Vertex"
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/loadFrame" : {
      "post" : {
        "tags" : [ "Frames" ],
        "summary" : "Load a frame",
        "description" : "Loads a frame in current session",
        "operationId" : "loadFrame",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the frame loading request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Load-Frame-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/loadGraph" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Load a graph",
        "description" : "Loads a graph in current session",
        "operationId" : "loadGraph",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the graph loading request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Create-Graph-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/loadModel" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Load a ML model",
        "description" : "Load a ML model in current session",
        "operationId" : "loadModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the pg2vecmodel loading request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Load-MlModel-Request-Config"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Pg2vecModelMetadata"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/lookupSnapshots" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "List available Snapshots",
        "description" : "Get a list of available in-memory snapshots of a graph",
        "operationId" : "getAvailableSnapshots",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "object holding the graph config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GraphConfigRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GraphMetaData"
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/mapProxies" : {
      "post" : {
        "tags" : [ "Map Proxies" ],
        "summary" : "Create a map proxy",
        "description" : "The map proxy allows you to access the elements of a map",
        "operationId" : "createMapProxy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body contains details for creating the map proxy.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateMapProxyRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/MapProxyResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/mapProxies/x-proxy-id/entries" : {
      "get" : {
        "tags" : [ "Map Proxies" ],
        "summary" : "Get list of entries",
        "description" : "This allows you to access the entry set of this map in a paginated way. It will give you an array of objects containing both a 'key' and a 'value' field.",
        "operationId" : "getEntrySet",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "Specifies the proxy. You can get this ID by requesting a map proxy from the core endpoint.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Parameter that specifies an offset for the list of items",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Parameter that specifies the size of the list.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ValueWrapper"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/mapProxies/x-proxy-id/keys" : {
      "get" : {
        "tags" : [ "Map Proxies" ],
        "summary" : "Get the keys of the map",
        "description" : "This allows you to access the key set of this map in a paginated way. This only returns the keys of the map.",
        "operationId" : "getKeySet",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "Specifies the proxy. You can get this ID by requesting a map proxy from the core endpoint.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Parameter that specifies an offset for the list of items",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Parameter that specifies the size of the list.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/KeyWrapper"
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/mapProxies/x-proxy-id/keys/x-map-key" : {
      "get" : {
        "tags" : [ "Map Proxies" ],
        "summary" : "Get the information about a key in the map",
        "description" : "Can be used to check whether the map behind this map proxy contains a specific key.",
        "operationId" : "containsKey",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "Specifies the proxy. You can get this ID by requesting a map proxy from the core endpoint.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-map-key",
          "in" : "header",
          "description" : "Json seralized object representing the key",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/KeyWrapper"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/mapProxies/x-proxy-id/keys/x-map-key/value" : {
      "get" : {
        "tags" : [ "Map Proxies" ],
        "summary" : "Get the value associated with the key",
        "description" : "The type of the key is specified when you create the map and will be part of the response from the core endpoint when you request the map proxy.",
        "operationId" : "getValueForKey",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "Specifies the proxy. You can get this ID by requesting a map proxy from the core endpoint.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-map-key",
          "in" : "header",
          "description" : "Json seralized object representing the key",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "strkey",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ValueWrapper"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/maps" : {
      "post" : {
        "tags" : [ "Maps" ],
        "summary" : "Create a graph-bound or session-bound map",
        "description" : "",
        "operationId" : "createMap",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Holds the properties of a create map request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateMapRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/MapInfo"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/maps/x-map-name" : {
      "delete" : {
        "tags" : [ "Maps" ],
        "summary" : "Delete a map",
        "description" : "",
        "operationId" : "destroyMap",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-map-name",
          "in" : "header",
          "description" : "Name of the map.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ignoreNotFound",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/maps/x-map-name/entries/x-map-key" : {
      "put" : {
        "tags" : [ "Maps" ],
        "summary" : "Set an entry in the map to a specific value",
        "description" : "",
        "operationId" : "setMapEntry",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-map-name",
          "in" : "header",
          "description" : "Name of the map.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Specifies the entry that should be changed.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypedMapEntry"
          }
        }, {
          "name" : "x-map-key",
          "in" : "header",
          "description" : "Json serialized object representing the key",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/maps/x-map-name/extractTopK" : {
      "post" : {
        "tags" : [ "Maps" ],
        "summary" : "Extract the top K elements from a map",
        "description" : "This will sort the elements of the map and return the elements which the highest value.",
        "operationId" : "extractTopKFromMap",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-map-name",
          "in" : "header",
          "description" : "Name of the map.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Holds the parameter to extract the top most elements of a collection.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ExtractTopKRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/mlModels/x-model-name" : {
      "delete" : {
        "tags" : [ "MlModels" ],
        "summary" : "Delete an MlModel",
        "description" : "Delete a specific MlModel in current session",
        "operationId" : "destroyMlModel",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the MlModel to be deleted",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/mlModels/x-model-name/storeWithConfig" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Store a model",
        "description" : "The PGX server will store the model to a location specified in the StoreMlModelRequest json payload. The server needs to have access to the resource where you want to store the model to.",
        "operationId" : "storeModelWithConfig",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "object that holds information on where to store the graph",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Store-MlModel-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/pathProxies" : {
      "post" : {
        "tags" : [ "Path Proxies" ],
        "summary" : "Get an all-paths proxy",
        "description" : "The all-paths proxy gives you access to a set of path proxies",
        "operationId" : "createAllPathsProxy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "the body specifying the all-paths proxy request parameters",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AllPathsProxyRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/AllPathsProxyResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/pathProxies/x-proxy-id/paths/x-destination" : {
      "get" : {
        "tags" : [ "Path Proxies" ],
        "summary" : "Get a specific path of an all-paths proxy object",
        "description" : "Given a all-paths proxy ID and a destination vertex ID, returns the corresponding path",
        "operationId" : "getPath",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "the all-paths proxy ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "destValueType",
          "in" : "query",
          "description" : "the type of the given destination vertex ID",
          "required" : true,
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        }, {
          "name" : "x-destination",
          "in" : "header",
          "description" : "the destination vertex ID value",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "destValueWrapped",
          "in" : "query",
          "description" : "is the destination vertex wrapped",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SerializedPathProxy"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/pg2vecMlModels" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Create a Pg2vec model",
        "description" : "Create a Pg2vec model in current session",
        "operationId" : "createPg2vecModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the pg2vecmodel creation request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Create-Pg2vecModel-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Pg2vecModelMetadata"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/pg2vecMlModels/x-model-name/computeSimilars" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Compute similars graphlets according to a pg2vec model",
        "description" : "Compute similars graphlets according to a pg2vec model in current session",
        "operationId" : "computeSimilarsPg2vecModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the pg2vec model to use",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the compute similars request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeSimilars-MlModel-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Computed",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/pg2vecMlModels/x-model-name/computeSimilarsBatch" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Compute similar graphlets according to a pg2vec model (batched variant)",
        "description" : "Compute similar graphlets according to a pg2vec model  (batched variant) in current session",
        "operationId" : "computeSimilarsBatchedPg2vecModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the pg2vec model to use",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the compute similars request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComputeSimilarsBatched-MlModel-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Computed",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/pg2vecMlModels/x-model-name/fit" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Train a Pg2vecModel",
        "description" : "Train a Pg2vecModel from the specified session",
        "operationId" : "fitPg2vecModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the pg2vec model to train",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the compute mlmodel request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Compute-MlModel-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/pg2vecMlModels/x-model-name/infer" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Infer with a Pg2vecModel",
        "description" : "Infer with a Pg2vecModel from the specified session",
        "operationId" : "inferGraphletPg2vecModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the pg2vec model to use",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the compute similars request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Compute-MlModel-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Computed",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/pg2vecMlModels/x-model-name/trainedGraphletVectors" : {
      "get" : {
        "tags" : [ "MlModels" ],
        "summary" : "Fetch the graphlets vectors of a Pg2vecModel",
        "description" : "Fetch the graphlets vectors of a Pg2vecModel",
        "operationId" : "getTrainedGraphletVectorsPg2vecModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the pg2vec model for which to fetch the graphlet vectors",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/pgql/cloneAndExecute" : {
      "post" : {
        "tags" : [ "PGQL" ],
        "summary" : "Run a PGQL query on a clone of the graph",
        "description" : "",
        "operationId" : "cloneAndExecutePgqlWithPost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request containing query, new graph name and semantic",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PgqlCloneAndExecuteRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Graph"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/pgql/execute" : {
      "post" : {
        "tags" : [ "PGQL" ],
        "summary" : "Run a PGQL query",
        "description" : "",
        "operationId" : "executePgqlWithPost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The PGQL query request containing query and semantic",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PgqlQueryRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/PgqlResultProxyResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/pgql/explain" : {
      "post" : {
        "tags" : [ "PGQL" ],
        "summary" : "Explain the execution plan of a PGQL query",
        "description" : "",
        "operationId" : "explainPgqlWithPost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The PGQL explain request containing the query",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PgqlExplainRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Operation"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/pgql/prepare" : {
      "post" : {
        "tags" : [ "PGQL" ],
        "summary" : "Prepare a pattern matching query",
        "description" : "Prepare a pattern matching query (from a PgxSession, where the FROM clause specifies the graph) or from an explicit PgxGraph",
        "operationId" : "preparePgql",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The PGQL prepare statement request containing the query",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PrepareStatementRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/PreparedStatementResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/pgql/preparedStatements/x-ps-id" : {
      "delete" : {
        "tags" : [ "PGQL" ],
        "summary" : "Delete a pattern matching result set that is bound to a session.",
        "description" : "",
        "operationId" : "destroyPreparedStatement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-ps-id",
          "in" : "header",
          "description" : "prepared statement id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/pgql/preparedStatements/x-ps-id/execute" : {
      "post" : {
        "tags" : [ "PGQL" ],
        "summary" : "Submit a pattern matching query",
        "description" : "",
        "operationId" : "executePreparedStatement",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-ps-id",
          "in" : "header",
          "description" : "prepared statement id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The PGQL execute prepared statement request containing the bind values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ExecutePreparedStatementRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/PgqlResultProxyResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/pgql/preparedStatements/x-ps-id/executeAny" : {
      "post" : {
        "tags" : [ "PGQL" ],
        "summary" : "Submit a pattern matching or graph altering query",
        "description" : "",
        "operationId" : "executeAnyPreparedStatement",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-ps-id",
          "in" : "header",
          "description" : "prepared statement id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The PGQL execute prepared statement request containing the bind values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ExecutePreparedStatementRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/PgqlResultProxyResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/pgql/queryResults/x-result-set-id" : {
      "delete" : {
        "tags" : [ "PGQL" ],
        "summary" : "Delete a pattern matching result set that is bound to a session",
        "description" : "",
        "operationId" : "destroyResult",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-result-set-id",
          "in" : "header",
          "description" : "Result set Id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/pgql/run" : {
      "post" : {
        "tags" : [ "PGQL" ],
        "summary" : "Run a PGQL query",
        "description" : "",
        "operationId" : "queryPgqlWithPost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The PGQL query request containing query and semantic",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PgqlQueryRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/PgqlResultProxyResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/pgqlProxies" : {
      "post" : {
        "tags" : [ "PGQL Proxies" ],
        "summary" : "Create a PGQL result set proxy",
        "description" : "Creates a PGQL query result set proxy by ID",
        "operationId" : "createPgqlResultSetProxy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Request body containing the result set ID",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreatePgqlResultProxyRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/PgqlResultSetProxy"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/pgqlProxies/x-proxy-id" : {
      "get" : {
        "tags" : [ "PGQL Proxies" ],
        "summary" : "Get a PGQL result set proxy",
        "description" : "Get a PGQL query result set proxy by ID",
        "operationId" : "getPgqlResultProxy",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "the PGQL result set proxy ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PgqlResultProxyResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/pgqlProxies/x-proxy-id/elements" : {
      "get" : {
        "tags" : [ "PGQL Proxies" ],
        "summary" : "Get PGQL result set elements",
        "description" : "Get the PGQL result set elements describing the column types of a given result set",
        "operationId" : "getResultElements",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "the PGQL result set proxy ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PgqlResultElement"
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/pgqlProxies/x-proxy-id/results" : {
      "get" : {
        "tags" : [ "PGQL Proxies" ],
        "summary" : "Get PGQL result set values",
        "description" : "Get PGQL result set values",
        "operationId" : "getResults",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "the PGQL result set proxy ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "pagination: 0-index based PGQL result set row number on which value fetching should start",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "pagination: how many elements to fetch",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/pgqlProxies/x-proxy-id/toFrame" : {
      "post" : {
        "tags" : [ "PGQL Proxies" ],
        "summary" : "Create a frame from a PGQL result set",
        "description" : "Create a frame from a PGQl result set",
        "operationId" : "createFrameFromPgqlResult",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "the PGQL result set proxy ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/propertyProxies" : {
      "post" : {
        "tags" : [ "Property Proxies" ],
        "summary" : "Create a property proxy",
        "description" : "The property proxy allows you to access the values of a certain property in a paginated way and also gives you point access.",
        "operationId" : "createPropertyProxy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Object holding request information to create a property proxy",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreatePropertyProxyRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/PropertyProxyResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/propertyProxies/x-proxy-id" : {
      "get" : {
        "tags" : [ "Property Proxies" ],
        "summary" : "Get a property proxy based on its ID",
        "description" : "The property proxy allows you to access the values of a certain property in a paginated way and also gives you point access.",
        "operationId" : "getPropertyProxy",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "Specifies the proxy. You can get this through the core endpoint.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PropertyProxyResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/propertyProxies/x-proxy-id/bottomKValues" : {
      "get" : {
        "tags" : [ "Property Proxies" ],
        "summary" : "Get the bottom K elements from a property proxy",
        "description" : "It will be sorted by the value of the property and you can choose how many elements you want.",
        "operationId" : "getBottomK",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "Specifies the proxy. You can get this through the core endpoint.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Parameter that specifies an offset for the list of items",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Parameter that specifies the size of the list.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "k",
          "in" : "query",
          "description" : " Parameter that specifies how many elements you want to get.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/propertyProxies/x-proxy-id/topKValues" : {
      "get" : {
        "tags" : [ "Property Proxies" ],
        "summary" : "Get the top K elements from a property proxy",
        "description" : "It will be sorted by the value of the property and you can choose how many elements you want.",
        "operationId" : "getTopK",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "Specifies the proxy. You can get this through the core endpoint.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Parameter that specifies an offset for the list of items",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Parameter that specifies the size of the list.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "k",
          "in" : "query",
          "description" : " Parameter that specifies how many elements you want to get.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/propertyProxies/x-proxy-id/values" : {
      "get" : {
        "tags" : [ "Property Proxies" ],
        "summary" : "Get values of the property proxy in a paginated way.",
        "description" : "By repeatedly specifying the start and the size you want to get, you can iterate over all the elements in this property proxy without having one huge response. This call is idempotent and you have no restrictions on start and size (other than the limits of the property proxy), but by not calling this endpoint in sequential order (e.g. 0-100 in the first request, 101 to 200 in the second request, etc) the server will not be able to guarantee the highest performance since it cannot cache certain objects.",
        "operationId" : "getValues",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "Specifies the proxy. You can get this through the core endpoint.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Parameter that specifies an offset for the list of items",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Parameter that specifies the size of the list.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/propertyProxies/x-proxy-id/values/x-property-key" : {
      "get" : {
        "tags" : [ "Property Proxies" ],
        "summary" : "Get a specific value from of a property proxy",
        "description" : "Get a specific value from of a property proxy, based on a key (either node or edge key).",
        "operationId" : "getPropertyValueForKey",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "x-proxy-id",
          "in" : "header",
          "description" : "Specifies the proxy. You can get this through the core endpoint.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-property-key",
          "in" : "header",
          "description" : "Serialized object representing the key. This depends on the type of the key, which is determined when the property is created in the core endpoint. The key and value type information is part of the response from the core endpoint.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "keyWrapped",
          "in" : "query",
          "description" : "is the key wrapped",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PropertyValue"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/redactions" : {
      "get" : {
        "tags" : [ "Graphs" ],
        "summary" : "Get redaction rules from the graph",
        "description" : "",
        "operationId" : "getRedactionRules",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "sessionId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "graphId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "USER", "ROLE" ]
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Add a redaction rule to the graph",
        "description" : "",
        "operationId" : "addRedactionRule",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "sessionId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "graphId",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which specifies the request for adding a redaction rule to a graph. This includes the rule config, the type and the names be added.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AddRedactionRuleRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/redactions-delete" : {
      "post" : {
        "tags" : [ "Graphs" ],
        "summary" : "Remove a redaction rule from the graph",
        "description" : "",
        "operationId" : "removeRedactionRule",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "sessionId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-graph-id",
          "in" : "header",
          "description" : "graphId",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Object which specifies the request for removing a redaction rule to a graph. This includes the rule config, the type and the names be added.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RemoveRedactionRuleRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/scalars" : {
      "post" : {
        "tags" : [ "Scalars" ],
        "summary" : "Create a scalar",
        "description" : "Scalar values are required if a algorithm requires out arguments. You can pass the algorithm the name of a scalar and it will set the value of that scalar. You can get the value of the scalar after the algorithm completed.",
        "operationId" : "createScalar",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Holds the properties of a create scalar request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateScalarRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/scalars/x-scalar-name" : {
      "delete" : {
        "tags" : [ "Scalars" ],
        "summary" : "Delete a scalar",
        "description" : "",
        "operationId" : "destroyScalar",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-scalar-name",
          "in" : "header",
          "description" : "the scalar name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ignoreNotFound",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/scalars/x-scalar-name/value" : {
      "get" : {
        "tags" : [ "Scalars" ],
        "summary" : "Get the value of a scalar",
        "description" : "",
        "operationId" : "getScalarValue",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-scalar-name",
          "in" : "header",
          "description" : "the scalar name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ScalarValue"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "Scalars" ],
        "summary" : "Set the value of a scalar",
        "description" : "",
        "operationId" : "setScalarValue",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-scalar-name",
          "in" : "header",
          "description" : "the scalar name.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Holds the parameters needed for a set scalar value request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SetScalarValueRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/core/v1/session" : {
      "delete" : {
        "tags" : [ "Sessions" ],
        "summary" : "Delete a session",
        "description" : "Deletes a session, based on the session ID provided. This will cause all pending futures to complete exceptionally with a CancellationException. Future requests with this session ID will be refused. This request also results in some cleanup activities on the server, where session-specific data like graphs and properties are removed.",
        "operationId" : "deleteSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "_csrf_token",
          "in" : "query",
          "description" : "CSRF token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/sessions" : {
      "post" : {
        "tags" : [ "Sessions" ],
        "summary" : "Create a new session",
        "description" : "If the parameters are not specified (null), then defaults will be used. If the server does not allow overriding defaults, the session cannot be created with parameters.",
        "operationId" : "createSession",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The request body contains the session parameters",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateSessionRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/core/v1/unsupervisedGraphWiseMlModels" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Create a Unsupervised GraphWise model",
        "description" : "Create a Unsupervised GraphWise model in current session",
        "operationId" : "createUnsupervisedGraphWiseModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the graphwise model creation request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Create-UnsupervisedGraphWiseModel-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/UnsupervisedGraphWiseModelMetadata"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/unsupervisedGraphWiseMlModels/x-model-name/fit" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Train a UnsupervisedGraphWise model",
        "description" : "Train a UnsupervisedGraphWise model from the specified session",
        "operationId" : "fitUnsupervisedGraphWiseModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the graphwise model to train",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the compute mlmodel request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Compute-MlModel-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/v1/unsupervisedGraphWiseMlModels/x-model-name/infer" : {
      "post" : {
        "tags" : [ "MlModels" ],
        "summary" : "Infer with a Unsupervised GraphWise model",
        "description" : "Infer with a Unsupervised GraphWise model on provided vertices",
        "operationId" : "inferUnsupervisedGraphWiseModel",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SID",
          "in" : "header",
          "description" : "session ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "x-model-name",
          "in" : "header",
          "description" : "the name of the graphwise model to infer with",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The request body defines the details to the inference request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UnsupervisedGraphWise-Inference-Request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/FrameMetaData"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/core/{version}" : {
      "get" : {
        "summary" : "Get Core Rest version",
        "description" : "",
        "operationId" : "getCoreVersion",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/isReady" : {
      "get" : {
        "tags" : [ "Server Management" ],
        "summary" : "Query whether the PGX server is running",
        "description" : "",
        "operationId" : "isReady",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/isRunning" : {
      "get" : {
        "tags" : [ "Server Management" ],
        "summary" : "Query whether the PGX server is running",
        "description" : "",
        "operationId" : "isRunning",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/token" : {
      "get" : {
        "tags" : [ "CSRF Token" ],
        "summary" : "Generate a CSRF token",
        "description" : "The generated token is stored in cookies and will be used in case of unsafe HTTP requests (POST/DELETE/PUT/PATCH)",
        "operationId" : "generateToken",
        "produces" : [ "application/json" ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/version" : {
      "get" : {
        "tags" : [ "PGX Version" ],
        "summary" : "Get the version",
        "description" : "Gets the PGX server version",
        "operationId" : "version",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "extendedInfo",
          "in" : "query",
          "description" : "whether to return extended version information",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VersionInfo"
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    }
  },
  "definitions" : {
    "Add-Rows-To-Frame-Builder-Request" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "type" : "object",
          "description" : "Data containing a list of columns of objects.",
          "additionalProperties" : {
            "$ref" : "#/definitions/IterableObject"
          }
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a add rows to frame builder request."
    },
    "AddRedactionRuleRequest" : {
      "type" : "object",
      "properties" : {
        "ruleConfig" : {
          "$ref" : "#/definitions/PgxRedactionRuleConfig"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "USER", "ROLE" ]
        },
        "names" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "AllPathsProxyRequest" : {
      "type" : "object",
      "properties" : {
        "src" : {
          "description" : "The source node of the path.",
          "$ref" : "#/definitions/IdTypedObject"
        },
        "srcValWrapped" : {
          "type" : "boolean",
          "description" : "Whether or not the source is wrapped"
        },
        "costId" : {
          "description" : "The ID of the edge property which specifies the edge cost.",
          "$ref" : "#/definitions/PgxId"
        },
        "distId" : {
          "description" : "The ID of the node property which contains the accumulated cost.",
          "$ref" : "#/definitions/PgxId"
        },
        "parentId" : {
          "description" : "The ID of the node property which will store the parent node information.",
          "$ref" : "#/definitions/PgxId"
        },
        "parentEdgeId" : {
          "description" : "The ID of the node property which will store the parent edge information.",
          "$ref" : "#/definitions/PgxId"
        },
        "graphId" : {
          "description" : "the name of the graph to run the path analysis on.",
          "$ref" : "#/definitions/PgxId"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "AllPathsProxyResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "proxyId" : {
          "type" : "string"
        }
      }
    },
    "AlterGraphRequest" : {
      "type" : "object",
      "properties" : {
        "oldGraphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "newGraphName" : {
          "type" : "string"
        },
        "cascadeEdgeProviderRemovals" : {
          "type" : "boolean"
        },
        "addedVertexProviders" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/EntityProviderConfigContainer"
          }
        },
        "addedEdgeProviders" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/EntityProviderConfigContainer"
          }
        },
        "addedEmptyVertexProviders" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/EntityProviderConfigContainer"
          }
        },
        "addedEmptyEdgeProviders" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/EntityProviderConfigContainer"
          }
        },
        "removedVertexProviders" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "removedEdgeProviders" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "dataSourceVersion" : {
          "type" : "string"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "AnalysisTaskConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "priority" : {
          "type" : "string",
          "enum" : [ "HIGH", "MEDIUM", "LOW" ]
        },
        "weight" : {
          "type" : "integer",
          "format" : "int32"
        },
        "maxThreads" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "Argument" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "BOOL_IN", "INT_IN", "LONG_IN", "FLOAT_IN", "DOUBLE_IN", "STRING_IN", "BOOL_OUT", "INT_OUT", "LONG_OUT", "FLOAT_OUT", "DOUBLE_OUT", "STRING_OUT", "NODE_ID_IN", "EDGE_ID_IN", "NODE_ID_OUT", "EDGE_ID_OUT", "GRAPH", "NODE_PROPERTY", "EDGE_PROPERTY", "COLLECTION", "MAP", "GENERIC_FILTER" ]
        },
        "value" : {
          "type" : "object"
        }
      }
    },
    "AsyncStatus" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "progress" : {
          "type" : "string"
        },
        "completed" : {
          "type" : "boolean"
        },
        "intervalToPoll" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "AuthorizationEntityConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "pgxPermissions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AuthorizationEntityPermissionConfig"
          }
        },
        "maxDataMemorySize" : {
          "type" : "string"
        },
        "maxDataMemoryRatio" : {
          "type" : "number",
          "format" : "double"
        },
        "pgxUser" : {
          "type" : "string"
        },
        "pgxRole" : {
          "type" : "string"
        },
        "user" : {
          "type" : "boolean"
        },
        "role" : {
          "type" : "boolean"
        },
        "generalPermissions" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "NONE", "SESSION_CREATE", "SESSION_NEW_GRAPH", "SESSION_GET_PUBLISHED_GRAPH", "SESSION_ADD_PUBLISHED_GRAPH", "SESSION_COMPILE_ALGORITHM", "SERVER_GET_INFO", "SERVER_MANAGE", "SESSION_READ_MODEL", "SESSION_MODIFY_MODEL" ]
          }
        },
        "allPermissions" : {
          "$ref" : "#/definitions/Permissions"
        },
        "maxMemoryLimit" : {
          "$ref" : "#/definitions/DataMemoryLimit"
        }
      }
    },
    "AuthorizationEntityPermissionConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "preloadedGraph" : {
          "type" : "string"
        },
        "fileLocation" : {
          "type" : "string"
        },
        "grant" : {
          "type" : "string",
          "enum" : [ "READ", "WRITE", "EXPORT", "MANAGE", "PGX_SESSION_CREATE", "PGX_SESSION_NEW_GRAPH", "PGX_SESSION_GET_PUBLISHED_GRAPH", "PGX_SESSION_ADD_PUBLISHED_GRAPH", "PGX_SESSION_COMPILE_ALGORITHM", "PGX_SERVER_GET_INFO", "PGX_SERVER_MANAGE", "PGX_SESSION_READ_MODEL", "PGX_SESSION_MODIFY_MODEL" ]
        }
      }
    },
    "AuthorizationLocationConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "name" : {
          "type" : "string"
        },
        "empty" : {
          "type" : "boolean"
        },
        "location" : {
          "type" : "string"
        }
      }
    },
    "BasicSchedulerConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "numWorkersAnalysis" : {
          "type" : "integer",
          "format" : "int32"
        },
        "numWorkersFastTrackAnalysis" : {
          "type" : "integer",
          "format" : "int32"
        },
        "numWorkersIo" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "BatchGenerator" : {
      "type" : "object",
      "properties" : {
        "batchGeneratorType" : {
          "type" : "string",
          "enum" : [ "STANDARD", "STRATIFIED_OVERSAMPLE" ]
        }
      }
    },
    "BindValueImpl" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "PATH", "ARRAY", "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "value" : {
          "type" : "object"
        }
      }
    },
    "Build-Frame-Request" : {
      "type" : "object",
      "properties" : {
        "frameName" : {
          "type" : "string",
          "description" : "Name of frame to be created."
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a build frame request."
    },
    "BuildGraphRequest" : {
      "type" : "object",
      "properties" : {
        "changeSetName" : {
          "type" : "string"
        },
        "oldGraphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "vertexIdType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "vertexPropTypes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string",
            "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
          }
        },
        "edgePropTypes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string",
            "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
          }
        },
        "newGraphName" : {
          "type" : "string"
        },
        "config" : {
          "$ref" : "#/definitions/GraphBuilderConfig"
        },
        "dataSourceVersion" : {
          "type" : "string"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CacheStatistics" : {
      "type" : "object",
      "properties" : {
        "freedMemory" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "CloneCollectionRequest" : {
      "type" : "object",
      "properties" : {
        "newCollectionName" : {
          "type" : "string"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CollectionProxyResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "proxyId" : {
          "type" : "string"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "collectionType" : {
          "type" : "string",
          "enum" : [ "ORDER", "SEQUENCE", "SET" ]
        },
        "valueType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "wrappedEntities" : {
          "type" : "boolean"
        }
      }
    },
    "CombinePropertyRequest" : {
      "type" : "object",
      "properties" : {
        "entityType" : {
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE", "ROW" ]
        },
        "name" : {
          "type" : "string"
        },
        "propertyIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CompilationResult" : {
      "type" : "object",
      "properties" : {
        "success" : {
          "type" : "boolean"
        },
        "errorMessage" : {
          "type" : "string"
        },
        "metaData" : {
          "$ref" : "#/definitions/CompiledProgramMetaData"
        }
      }
    },
    "CompiledProgramMetaData" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "argumentTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "BOOL_IN", "INT_IN", "LONG_IN", "FLOAT_IN", "DOUBLE_IN", "STRING_IN", "BOOL_OUT", "INT_OUT", "LONG_OUT", "FLOAT_OUT", "DOUBLE_OUT", "STRING_OUT", "NODE_ID_IN", "EDGE_ID_IN", "NODE_ID_OUT", "EDGE_ID_OUT", "GRAPH", "NODE_PROPERTY", "EDGE_PROPERTY", "COLLECTION", "MAP", "GENERIC_FILTER" ]
          }
        },
        "returnType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "STRING", "DATE", "VOID" ]
        }
      }
    },
    "ComponentsProxyResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "proxyId" : {
          "type" : "string"
        },
        "size" : {
          "type" : "integer",
          "format" : "int64"
        },
        "propertyId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "componentNamespace" : {
          "$ref" : "#/definitions/PgxId"
        }
      }
    },
    "Compute-MlModel-Request" : {
      "type" : "object",
      "properties" : {
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "graphletIdPropertyType" : {
          "type" : "string"
        },
        "isBatch" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a compute request for MlModel (fit/inference)"
    },
    "ComputeSimilars-MlModel-Request" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "k" : {
          "type" : "integer",
          "format" : "int32"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a MlModel compute similars request"
    },
    "ComputeSimilarsBatched-MlModel-Request" : {
      "type" : "object",
      "properties" : {
        "idList" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "k" : {
          "type" : "integer",
          "format" : "int32"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a MlMode compute similars request (batch processing)"
    },
    "ContainsElementRequest" : {
      "type" : "object",
      "properties" : {
        "element" : {
          "type" : "object"
        },
        "wrapped" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "ControlConfigUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "mapConfig" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "json" : {
          "type" : "string"
        },
        "updateWithJson" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "ControlSessionMaxMemoryRequest" : {
      "type" : "object",
      "properties" : {
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "memoryUnit" : {
          "type" : "string"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "ControlShutdownRequest" : {
      "type" : "object",
      "properties" : {
        "shutdownIfRunning" : {
          "type" : "boolean"
        },
        "timeout" : {
          "type" : "string"
        },
        "timeUnit" : {
          "type" : "string"
        },
        "forceShutdown" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "ControlStartRequest" : {
      "type" : "object",
      "properties" : {
        "mapConfig" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "json" : {
          "type" : "string"
        },
        "keystorePath" : {
          "type" : "string"
        },
        "keystorePassword" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "startWithConfig" : {
          "type" : "boolean"
        },
        "startWithJson" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CorruptionFunction" : {
      "type" : "object"
    },
    "Create-DeepWalkModel-Request" : {
      "type" : "object",
      "properties" : {
        "modelMetadata" : {
          "description" : "DeepWalk model metadata",
          "$ref" : "#/definitions/DeepWalkModelMetadata"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a DeepWalkModel create request"
    },
    "Create-Frame-Builder-Request" : {
      "type" : "object",
      "properties" : {
        "schema" : {
          "description" : "Schema of frame to be created.",
          "$ref" : "#/definitions/EntityProviderConfigContainer"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a create frame builder request."
    },
    "Create-Graph-Request" : {
      "type" : "object",
      "properties" : {
        "graphConfig" : {
          "description" : "Graph config specifying the graph and its properties. See the graph config reference for more information.",
          "$ref" : "#/definitions/GraphConfigContainer"
        },
        "graphName" : {
          "type" : "string",
          "description" : "Name the graph should have in the system. Graph names are session private and have to be unique per session."
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a load graph or get available snapshots request."
    },
    "Create-Pg2vecModel-Request" : {
      "type" : "object",
      "properties" : {
        "modelMetadata" : {
          "description" : "Pg2vec model metadata",
          "$ref" : "#/definitions/Pg2vecModelMetadata"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a Pg2vecModel create request"
    },
    "Create-SupervisedGraphWiseModel-Request" : {
      "type" : "object",
      "properties" : {
        "modelMetadata" : {
          "description" : "SupervisedGraphWise model metadata",
          "$ref" : "#/definitions/SupervisedGraphWiseModelMetadata"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a SupervisedGraphWiseModel create request"
    },
    "Create-UnsupervisedGraphWiseModel-Request" : {
      "type" : "object",
      "properties" : {
        "modelMetadata" : {
          "description" : "UnsupervisedGraphWise model metadata",
          "$ref" : "#/definitions/UnsupervisedGraphWiseModelMetadata"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a UnsupervisedGraphWiseModel create request"
    },
    "CreateAnalysisRequest" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "disabledOptimizations" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "AUTO_TRANSFORM_MS_BFS", "COMMON_NEIGHBOR_ITERATION", "COMMON_NEIGHBOR_ITERATION_EARLY_PRUNING", "EDGE_ITERATOR_TO_NODE_ITERATOR", "ELIMINATE_EMPTY_CODE", "ELIMINATE_UNUSED_VARIABLES", "FIXED_PRINT_ORDER", "FLIP_BFS_EDGES", "FLIP_FOREACH_EDGES", "HOIST_RESOURCES", "HOIST_STATEMENTS", "INLINE_VECTOR_OPERATORS", "MERGE_LOOPS", "MERGE_PROPERTIES", "MOVE_ASSIGNS", "MOVE_FOREACH", "OPTIMIZE_REDUCTIONS", "PRECOMPUTE_DEGREE", "PRIVATIZATION", "PROPAGATE_WRITES", "REMOVE_UNUSED_PROPERTIES", "REMOVE_UNUSED_SCALARS", "SELECT_MAP_IMPLEMENTATION", "SELECT_PARALLEL_REGIONS", "SELECT_SEQ_IMPLEMENTATION", "SIMPLIFY_MIN_MAX_ASSIGN", "SPECIALIZE_GRAPH_TYPES" ]
          }
        },
        "parallel" : {
          "type" : "boolean"
        },
        "verbose" : {
          "type" : "boolean"
        },
        "overwrite" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CreateBipartiteSubgraphRequest" : {
      "type" : "object",
      "properties" : {
        "nodePropIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "edgePropIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "newGraphName" : {
          "type" : "string"
        },
        "nodeSetName" : {
          "$ref" : "#/definitions/PgxId"
        },
        "isLeftPropName" : {
          "type" : "string"
        },
        "inPlace" : {
          "type" : "boolean"
        },
        "fromLeftSet" : {
          "type" : "boolean"
        },
        "fromInDegree" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CreateCollectionProxyRequest" : {
      "type" : "object",
      "properties" : {
        "collectionName" : {
          "$ref" : "#/definitions/PgxId"
        },
        "collectionNamespace" : {
          "$ref" : "#/definitions/PgxId"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "isComponentCollection" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CreateCollectionRequest" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "ORDER", "SEQUENCE", "SET" ]
        },
        "elementType" : {
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE", "ROW" ]
        },
        "contentType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "collectionName" : {
          "type" : "string"
        },
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "fromFilter" : {
          "type" : "boolean"
        },
        "filter" : {
          "$ref" : "#/definitions/GraphFilter"
        },
        "fromComponent" : {
          "type" : "boolean"
        },
        "componentStorageName" : {
          "$ref" : "#/definitions/PgxId"
        },
        "componentId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "isScalarCollection" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CreateComponentsProxyRequest" : {
      "type" : "object",
      "properties" : {
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "propId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "numComponents" : {
          "type" : "integer",
          "format" : "int64"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CreateMapProxyRequest" : {
      "type" : "object",
      "properties" : {
        "mapName" : {
          "type" : "string"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CreateMapRequest" : {
      "type" : "object",
      "properties" : {
        "keyType" : {
          "type" : "string",
          "description" : "The type of keys this map should have",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "valType" : {
          "type" : "string",
          "description" : "The type of values this map should have",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "mapName" : {
          "type" : "string",
          "description" : "The name the newly created map should have"
        },
        "graphId" : {
          "description" : "The name of the graph",
          "$ref" : "#/definitions/PgxId"
        },
        "isSessionMap" : {
          "type" : "boolean",
          "description" : "a flag specifying if the map to be created is a session map"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CreatePgqlResultProxyRequest" : {
      "type" : "object",
      "properties" : {
        "resultSetId" : {
          "type" : "string"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CreatePropertyProxyRequest" : {
      "type" : "object",
      "properties" : {
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "propertyId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "entityType" : {
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE", "ROW" ]
        },
        "labelFlag" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CreatePropertyRequest" : {
      "type" : "object",
      "properties" : {
        "entityType" : {
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE", "ROW" ]
        },
        "type" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "name" : {
          "type" : "string"
        },
        "hardName" : {
          "type" : "boolean"
        },
        "dimension" : {
          "type" : "integer",
          "format" : "int32"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CreateScalarRequest" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "scalarName" : {
          "type" : "string"
        },
        "dimension" : {
          "type" : "integer",
          "format" : "int32"
        },
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CreateSessionRequest" : {
      "type" : "object",
      "properties" : {
        "source" : {
          "type" : "string"
        },
        "idleTimeout" : {
          "type" : "integer",
          "format" : "int64"
        },
        "taskTimeout" : {
          "type" : "integer",
          "format" : "int64"
        },
        "timeUnitName" : {
          "type" : "string"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CreateSparsifiedSubgraphRequest" : {
      "type" : "object",
      "properties" : {
        "nodePropIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "edgePropIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "newGraphName" : {
          "type" : "string"
        },
        "e" : {
          "type" : "number",
          "format" : "double"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "CreateSubgraphFromFilterRequest" : {
      "type" : "object",
      "properties" : {
        "nodePropIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "edgePropIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "newGraphName" : {
          "type" : "string"
        },
        "graphFilter" : {
          "$ref" : "#/definitions/GraphFilter"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "DataMemoryLimit" : {
      "type" : "object",
      "properties" : {
        "absoluteLimit" : {
          "type" : "integer",
          "format" : "int64"
        },
        "ratioLimit" : {
          "type" : "number",
          "format" : "double"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "MAX_TOTAL_DATA_MEMORY", "MAX_TOTAL_PRIVATE_DATA_MEMORY", "MAX_TOTAL_SHARED_DATA_MEMORY", "MAX_PER_USER_DATA_MEMORY", "MAX_PER_SESSION_DATA_MEMORY", "USER_SPECIFIC_MAX_DATA_MEMORY", "ROLE_SPECIFIC_MAX_DATA_MEMORY" ]
        },
        "absoluteLimitSet" : {
          "type" : "boolean"
        }
      }
    },
    "DataMemoryLimitsConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "maxTotalDataMemorySize" : {
          "type" : "string"
        },
        "maxTotalDataMemoryRatio" : {
          "type" : "number",
          "format" : "double"
        },
        "maxTotalPrivateDataMemorySize" : {
          "type" : "string"
        },
        "maxTotalPrivateDataMemoryRatio" : {
          "type" : "number",
          "format" : "double"
        },
        "maxTotalSharedDataMemorySize" : {
          "type" : "string"
        },
        "maxTotalSharedDataMemoryRatio" : {
          "type" : "number",
          "format" : "double"
        },
        "maxPerUserDataMemorySize" : {
          "type" : "string"
        },
        "maxPerUserDataMemoryRatio" : {
          "type" : "number",
          "format" : "double"
        },
        "maxPerSessionDataMemorySize" : {
          "type" : "string"
        },
        "maxPerSessionDataMemoryRatio" : {
          "type" : "number",
          "format" : "double"
        },
        "maxTotalPrivateDataMemoryRatioSet" : {
          "type" : "boolean"
        },
        "maxTotalSharedDataMemoryRatioSet" : {
          "type" : "boolean"
        },
        "maxPerUserDataMemoryRatioSet" : {
          "type" : "boolean"
        },
        "maxPerSessionDataMemoryRatioSet" : {
          "type" : "boolean"
        },
        "maxTotalDataMemoryRatioSet" : {
          "type" : "boolean"
        }
      }
    },
    "DeepWalkModelMetadata" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "modelKind" : {
          "type" : "string",
          "enum" : [ "DEEPWALK", "PG2VEC", "SUPERVISED_GRAPHWISE", "UNSUPERVISED_GRAPHWISE" ]
        },
        "modelName" : {
          "type" : "string"
        },
        "minWordFrequency" : {
          "type" : "integer",
          "format" : "int32"
        },
        "batchSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "numEpochs" : {
          "type" : "integer",
          "format" : "int32"
        },
        "layerSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "learningRate" : {
          "type" : "number",
          "format" : "double"
        },
        "minLearningRate" : {
          "type" : "number",
          "format" : "double"
        },
        "windowSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "walkLength" : {
          "type" : "integer",
          "format" : "int32"
        },
        "walksPerVertex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sampleRate" : {
          "type" : "number",
          "format" : "double"
        },
        "negativeSample" : {
          "type" : "integer",
          "format" : "int32"
        },
        "trainingLoss" : {
          "type" : "number",
          "format" : "double"
        },
        "validationFraction" : {
          "type" : "number",
          "format" : "double"
        },
        "vertexIdPropertyType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "seed" : {
          "type" : "integer",
          "format" : "int64"
        },
        "shuffle" : {
          "type" : "boolean"
        },
        "ignoreIsolated" : {
          "type" : "boolean"
        },
        "loss" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "DescribeFrameRequest" : {
      "type" : "object",
      "properties" : {
        "location" : {
          "$ref" : "#/definitions/EntityProviderLocation"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "DescribeGraphRequest" : {
      "type" : "object",
      "properties" : {
        "graphLocation" : {
          "$ref" : "#/definitions/GraphLocation"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "Edge" : {
      "type" : "object",
      "properties" : {
        "graphId" : {
          "readOnly" : true,
          "$ref" : "#/definitions/PgxId"
        },
        "tableName" : {
          "type" : "string",
          "readOnly" : true
        },
        "idType" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "key" : {
          "type" : "object",
          "readOnly" : true
        },
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "entityType" : {
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE", "ROW" ]
        }
      }
    },
    "EdgeFrameDeclaration" : {
      "type" : "object",
      "properties" : {
        "edgeTableName" : {
          "type" : "string"
        },
        "sourceVertexTableName" : {
          "type" : "string"
        },
        "sourceVertexKeyColumnName" : {
          "type" : "string"
        },
        "destinationVertexTableName" : {
          "type" : "string"
        },
        "destinationVertexKeyColumnName" : {
          "type" : "string"
        },
        "frameMetaData" : {
          "$ref" : "#/definitions/FrameMetaData"
        }
      }
    },
    "EdgeLabel" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "label" : {
          "type" : "string"
        },
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "edgeKey" : {
          "type" : "string"
        },
        "idType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        }
      }
    },
    "EdgeProviderMetaData" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "idType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "directed" : {
          "type" : "boolean"
        },
        "labels" : {
          "type" : "array",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PropertyMetaData"
          }
        },
        "sourceVertexProviderName" : {
          "type" : "string",
          "readOnly" : true
        },
        "destinationVertexProviderName" : {
          "type" : "string",
          "readOnly" : true
        },
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        }
      }
    },
    "EdgeStrategy" : {
      "type" : "object",
      "properties" : {
        "strategyType" : {
          "type" : "string",
          "enum" : [ "KEEP_ALL", "PICK_ANY", "PICK_BY_EDGE_ID", "PICK_BY_PROPERTY", "MERGE" ]
        },
        "noSelfEdges" : {
          "type" : "boolean"
        }
      }
    },
    "EdgeTable" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "metaData" : {
          "$ref" : "#/definitions/EdgeProviderMetaData"
        },
        "providerLabels" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "keyPropertyName" : {
          "type" : "string"
        },
        "entityKeyType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "isIdentityKeyMapping" : {
          "type" : "boolean"
        },
        "sourceVertexTableName" : {
          "type" : "string"
        },
        "destinationVertexTableName" : {
          "type" : "string"
        },
        "edgeLabel" : {
          "$ref" : "#/definitions/Property"
        },
        "edgeProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Property"
          }
        },
        "transient" : {
          "type" : "boolean"
        }
      }
    },
    "EnterpriseSchedulerConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "maxNumConcurrentIoTasks" : {
          "type" : "integer",
          "format" : "int32"
        },
        "analysisTaskConfig" : {
          "$ref" : "#/definitions/AnalysisTaskConfig"
        },
        "fastAnalysisTaskConfig" : {
          "$ref" : "#/definitions/AnalysisTaskConfig"
        },
        "numIoThreadsPerTask" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "EnterpriseSchedulerFlagsConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "showLogging" : {
          "type" : "boolean"
        },
        "showWarnings" : {
          "type" : "boolean"
        },
        "showProfiling" : {
          "type" : "boolean"
        },
        "showSchedulerState" : {
          "type" : "boolean"
        },
        "showAllocations" : {
          "type" : "boolean"
        },
        "logToStderr" : {
          "type" : "boolean"
        },
        "showDebug" : {
          "type" : "boolean"
        },
        "overrideCoresPerSocket" : {
          "type" : "integer",
          "format" : "int32"
        },
        "overrideMemoryPlacement" : {
          "type" : "boolean"
        },
        "markLoopForProfiling" : {
          "type" : "string"
        },
        "selectPerformanceCounters" : {
          "type" : "string"
        },
        "selectPerformanceCountersLibrary" : {
          "type" : "integer",
          "format" : "int32"
        },
        "selectPerformanceCountersPcmShowCodes" : {
          "type" : "integer",
          "format" : "int32"
        },
        "selectPerformanceCountersJobRegions" : {
          "type" : "integer",
          "format" : "int32"
        },
        "selectPerformanceCountersShowStats" : {
          "type" : "integer",
          "format" : "int32"
        },
        "showDeterministicOutput" : {
          "type" : "boolean"
        },
        "spinOnExit" : {
          "type" : "boolean"
        },
        "enableDebugSignal" : {
          "type" : "boolean"
        },
        "fixThreadsUsedFromMain" : {
          "type" : "boolean"
        },
        "showEnvironment" : {
          "type" : "boolean"
        },
        "selectRegionPerformanceCounters" : {
          "type" : "string"
        }
      }
    },
    "EntityProviderConfig" : {
      "type" : "object",
      "properties" : {
        "sourceVertexKeyType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "destinationVertexKeyType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "props" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GraphPropertyConfig"
          }
        },
        "keyType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "label" : {
          "type" : "string"
        },
        "loading" : {
          "$ref" : "#/definitions/ProviderLoadingConfig"
        },
        "sourceVertexProvider" : {
          "type" : "string"
        },
        "destinationVertexProvider" : {
          "type" : "string"
        },
        "keyMappingEnabled" : {
          "type" : "boolean"
        },
        "validatedLabel" : {
          "type" : "string"
        },
        "labelLoadingEnabled" : {
          "type" : "boolean"
        },
        "name" : {
          "type" : "string"
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "format" : {
          "type" : "string",
          "enum" : [ "PGB", "RDBMS", "CSV", "ES" ]
        },
        "keystoreAlias" : {
          "type" : "string"
        },
        "errorHandling" : {
          "$ref" : "#/definitions/GraphErrorHandlingConfig"
        },
        "localDateFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "timeFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "timestampFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "timeWithTimezoneFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "timestampWithTimezoneFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "vectorComponentDelimiter" : {
          "type" : "string"
        },
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "EntityProviderConfigContainer" : {
      "type" : "object"
    },
    "EntityProviderLocation" : {
      "type" : "object",
      "properties" : {
        "locationKind" : {
          "type" : "string",
          "enum" : [ "FILE", "DB" ]
        },
        "entityType" : {
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE", "ROW" ]
        },
        "format" : {
          "type" : "string",
          "enum" : [ "PGB", "RDBMS", "CSV", "ES" ]
        },
        "filePaths" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ExecutePreparedStatementRequest" : {
      "type" : "object",
      "properties" : {
        "bindValues" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BindValueImpl"
          }
        },
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "ExecutionEnvironmentUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "poolType" : {
          "type" : "string",
          "enum" : [ "SERVER_THREAD", "FAST_TRACK_ANALYSIS_POOL", "ANALYSIS_POOL", "IO_POOL" ]
        },
        "field" : {
          "type" : "string",
          "enum" : [ "NUM_THREADS_PER_TASK", "WEIGHT", "PRIORITY", "MAX_NUM_THREADS", "UPDATE_CONSISTENCY_MODEL", "ALLOW_MULTIPLE_CONCURRENT_TASKS" ]
        },
        "value" : {
          "type" : "object"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "ExpandPropertyRequest" : {
      "type" : "object",
      "properties" : {
        "entityType" : {
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE", "ROW" ]
        },
        "namePrefix" : {
          "type" : "string"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "ExternalStoreConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "name" : {
          "type" : "string"
        },
        "empty" : {
          "type" : "boolean"
        },
        "options" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "ExtractTopKRequest" : {
      "type" : "object",
      "properties" : {
        "collectionName" : {
          "$ref" : "#/definitions/PgxId"
        },
        "k" : {
          "type" : "integer",
          "format" : "int32"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "FilterExpressionConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "NONE", "VERTEX", "EDGE", "UNION", "INTERSECTION", "GENERIC", "PATH_FINDING" ]
        },
        "expression" : {
          "type" : "string"
        }
      }
    },
    "FlattenFrameRequest" : {
      "type" : "object",
      "properties" : {
        "inPlace" : {
          "type" : "boolean"
        },
        "columns" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "FrameColumnMetaData" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "frameId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "columnId" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "dimension" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "FrameExtractionRequest" : {
      "type" : "object",
      "properties" : {
        "inPlace" : {
          "type" : "boolean"
        },
        "numRows" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "the number of rows to extract"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "FrameMetaData" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "frameUid" : {
          "$ref" : "#/definitions/PgxId"
        },
        "columnMetaDataMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/FrameColumnMetaData"
          }
        }
      }
    },
    "FramePrintingRequest" : {
      "type" : "object",
      "properties" : {
        "numResults" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "the number of rows to print"
        },
        "from" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "the offset at which to start printing"
        },
        "truncate" : {
          "type" : "boolean",
          "description" : "whether or not to truncate the output"
        },
        "lineSeparator" : {
          "type" : "string",
          "description" : "the lineSeparator to use"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "FrontierRedactedVerticesConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "withVisibleProperties" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "GetGraphByNameRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "namespaceId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "Graph" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "graphName" : {
          "type" : "string"
        },
        "vertexTables" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/VertexTable"
          }
        },
        "edgeTables" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/EdgeTable"
          }
        },
        "metaData" : {
          "$ref" : "#/definitions/GraphMetaData"
        },
        "ageMs" : {
          "type" : "integer",
          "format" : "int64"
        },
        "transient" : {
          "type" : "boolean"
        },
        "partitioned" : {
          "type" : "boolean"
        }
      }
    },
    "GraphBuilderConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "retainEdgeId" : {
          "type" : "boolean"
        },
        "retainVertexId" : {
          "type" : "boolean"
        },
        "vertexIdGenerationStrategy" : {
          "type" : "string",
          "enum" : [ "USER_IDS", "AUTO_GENERATED" ]
        },
        "edgeIdGenerationStrategy" : {
          "type" : "string",
          "enum" : [ "USER_IDS", "AUTO_GENERATED" ]
        }
      }
    },
    "GraphConfig" : {
      "type" : "object",
      "properties" : {
        "vertexProps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GraphPropertyConfig"
          }
        },
        "fileFormat" : {
          "type" : "boolean"
        },
        "partitionWhileLoading" : {
          "type" : "string",
          "enum" : [ "BY_LABEL", "NO" ]
        },
        "edgeProps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GraphPropertyConfig"
          }
        },
        "validatedVertexIdStrategy" : {
          "type" : "string",
          "enum" : [ "NO_IDS", "KEYS_AS_IDS", "UNSTABLE_GENERATED_IDS", "PARTITIONED_IDS" ]
        },
        "vertexIdType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "validatedVertexIdType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "loading" : {
          "$ref" : "#/definitions/GraphLoadingConfig"
        },
        "optimizedFor" : {
          "type" : "string",
          "enum" : [ "READ", "UPDATES" ]
        },
        "singleFileFormat" : {
          "type" : "boolean"
        },
        "multipleFileFormat" : {
          "type" : "boolean"
        },
        "loadingOptions" : {
          "$ref" : "#/definitions/GraphLoadingConfig"
        },
        "externalStores" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExternalStoreConfig"
          }
        },
        "arrayCompactionThreshold" : {
          "type" : "number",
          "format" : "double"
        },
        "validatedEdgeIdStrategy" : {
          "type" : "string",
          "enum" : [ "NO_IDS", "KEYS_AS_IDS", "UNSTABLE_GENERATED_IDS", "PARTITIONED_IDS" ]
        },
        "edgeIdType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "validatedEdgeIdType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "nodeKeyType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "loadEdgeKeys" : {
          "type" : "boolean"
        },
        "loadVertexKeys" : {
          "type" : "boolean"
        },
        "vertexLabelsLoadingEnabled" : {
          "type" : "boolean"
        },
        "edgeLabelLoadingEnabled" : {
          "type" : "boolean"
        },
        "loadingFilter" : {
          "$ref" : "#/definitions/GraphFilter"
        },
        "vertexPropertyTypes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string",
            "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
          }
        },
        "edgePropertyTypes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string",
            "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
          }
        },
        "name" : {
          "type" : "string"
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "format" : {
          "type" : "string",
          "enum" : [ "PGB", "EDGE_LIST", "TWO_TABLES", "ADJ_LIST", "FLAT_FILE", "GRAPHML", "PG", "RDF", "CSV" ]
        },
        "keystoreAlias" : {
          "type" : "string"
        },
        "errorHandling" : {
          "$ref" : "#/definitions/GraphErrorHandlingConfig"
        },
        "localDateFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "timeFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "timestampFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "timeWithTimezoneFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "timestampWithTimezoneFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "vectorComponentDelimiter" : {
          "type" : "string"
        },
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "GraphConfigContainer" : {
      "type" : "object"
    },
    "GraphConfigRequest" : {
      "type" : "object",
      "properties" : {
        "graphConfig" : {
          "description" : "Graph config specifying the graph and its properties. See the graph config reference for more information.",
          "$ref" : "#/definitions/GraphConfigContainer"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "GraphErrorHandlingConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "onMissedPropKey" : {
          "type" : "string",
          "enum" : [ "SILENT", "LOG_WARN", "LOG_WARN_ONCE", "ERROR" ]
        },
        "onPropConversion" : {
          "type" : "string",
          "enum" : [ "SILENT", "LOG_WARN", "LOG_WARN_ONCE", "ERROR" ]
        },
        "onParsingIssue" : {
          "type" : "string",
          "enum" : [ "SILENT", "LOG_WARN", "LOG_WARN_ONCE", "ERROR" ]
        },
        "onTypeMismatch" : {
          "type" : "string",
          "enum" : [ "SILENT", "LOG_WARN", "LOG_WARN_ONCE", "ERROR" ]
        },
        "onVectorLengthMismatch" : {
          "type" : "string",
          "enum" : [ "SILENT", "LOG_WARN", "LOG_WARN_ONCE", "ERROR" ]
        },
        "onMissingVertex" : {
          "type" : "string",
          "enum" : [ "IGNORE_EDGE", "IGNORE_EDGE_LOG", "IGNORE_EDGE_LOG_ONCE", "CREATE_VERTEX", "CREATE_VERTEX_LOG", "CREATE_VERTEX_LOG_ONCE", "ERROR" ]
        },
        "onDuplicateEntityId" : {
          "type" : "string",
          "enum" : [ "SILENT", "LOG_WARN", "LOG_WARN_ONCE", "ERROR" ]
        },
        "enableVertexIdDuplicateCheck" : {
          "type" : "boolean"
        },
        "enableEdgeIdDuplicateCheck" : {
          "type" : "boolean"
        }
      }
    },
    "GraphExpansionConfig" : {
      "type" : "object",
      "discriminator" : "expansionType",
      "properties" : {
        "expansionType" : {
          "type" : "string",
          "enum" : [ "PGQL_EXPANSION" ]
        },
        "newGraphName" : {
          "type" : "string"
        },
        "asSnapshot" : {
          "type" : "boolean"
        },
        "vertexPropertyMergeStrategy" : {
          "type" : "string",
          "enum" : [ "KEEP_CURRENT_VALUES", "UPDATE_WITH_NEW_VALUES" ]
        },
        "edgePropertyMergeStrategy" : {
          "type" : "string",
          "enum" : [ "KEEP_CURRENT_VALUES", "UPDATE_WITH_NEW_VALUES" ]
        }
      }
    },
    "GraphExpansionRequest" : {
      "type" : "object",
      "properties" : {
        "expansionConfig" : {
          "$ref" : "#/definitions/GraphExpansionConfig"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "GraphFilter" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "NONE", "VERTEX", "EDGE", "UNION", "INTERSECTION", "GENERIC", "PATH_FINDING" ]
        },
        "resultSetFilter" : {
          "type" : "boolean"
        },
        "collectionFilter" : {
          "type" : "boolean"
        },
        "pathFindingFilter" : {
          "type" : "boolean"
        }
      }
    },
    "GraphFrameDeclaration" : {
      "type" : "object",
      "properties" : {
        "graphName" : {
          "type" : "string"
        },
        "vertexFrames" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/VertexFrameDeclaration"
          }
        },
        "edgeFrames" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/EdgeFrameDeclaration"
          }
        },
        "partitioned" : {
          "type" : "boolean"
        }
      }
    },
    "GraphFromFramesRequest" : {
      "type" : "object",
      "properties" : {
        "declaration" : {
          "description" : "Graph declaration object",
          "$ref" : "#/definitions/GraphFrameDeclaration"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "GraphInfo" : {
      "type" : "object",
      "properties" : {
        "graphName" : {
          "type" : "string"
        },
        "autoRefreshed" : {
          "type" : "boolean"
        },
        "fresh" : {
          "type" : "boolean"
        },
        "pinned" : {
          "type" : "boolean"
        },
        "pprivate" : {
          "type" : "boolean"
        },
        "sessions" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "numNodes" : {
          "type" : "integer",
          "format" : "int64"
        },
        "numEdges" : {
          "type" : "integer",
          "format" : "int64"
        },
        "properties" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PropertyInfo"
          }
        },
        "memSizeGraphInMegabytes" : {
          "type" : "integer",
          "format" : "int32"
        },
        "memSizePropertiesInMegabytes" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "GraphLoadingConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "filter" : {
          "$ref" : "#/definitions/FilterExpressionConfig"
        },
        "filterStrategy" : {
          "type" : "string",
          "enum" : [ "AUTO", "POST", "STREAM", "DB" ]
        },
        "propertyValueDelimiter" : {
          "type" : "string"
        },
        "createLabelHistogram" : {
          "type" : "boolean"
        },
        "updatePropertiesInPlace" : {
          "type" : "boolean"
        },
        "partitionDiscardDefaultValues" : {
          "type" : "boolean"
        },
        "loadingProgressReportingFrequency" : {
          "type" : "integer",
          "format" : "int32"
        },
        "createEdgeIdIndex" : {
          "type" : "boolean"
        },
        "createEdgeIdMapping" : {
          "type" : "boolean"
        },
        "createVertexIdIndex" : {
          "type" : "boolean"
        },
        "createVertexIdMapping" : {
          "type" : "boolean"
        },
        "autoRefresh" : {
          "type" : "boolean"
        },
        "useVertexPropertyValueAsLabel" : {
          "type" : "string"
        },
        "snapshotsSource" : {
          "type" : "string",
          "enum" : [ "REFRESH", "CHANGE_SET" ]
        },
        "updateThreshold" : {
          "type" : "integer",
          "format" : "int32"
        },
        "fetchIntervalSec" : {
          "type" : "integer",
          "format" : "int32"
        },
        "updateIntervalSec" : {
          "type" : "integer",
          "format" : "int32"
        },
        "strictMode" : {
          "type" : "boolean"
        }
      }
    },
    "GraphLocation" : {
      "type" : "object",
      "properties" : {
        "format" : {
          "type" : "string",
          "enum" : [ "PGB", "EDGE_LIST", "TWO_TABLES", "ADJ_LIST", "FLAT_FILE", "GRAPHML", "PG", "RDF", "CSV" ]
        },
        "@type" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "FILE_GRAPH_LOCATION", "PG_VIEW_LOCATION" ]
        }
      }
    },
    "GraphMetaData" : {
      "type" : "object",
      "properties" : {
        "vertexIdType" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "edgeIdType" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "numVertices" : {
          "type" : "integer",
          "format" : "int64"
        },
        "numEdges" : {
          "type" : "integer",
          "format" : "int64"
        },
        "memoryMb" : {
          "type" : "integer",
          "format" : "int64"
        },
        "dataSourceVersion" : {
          "type" : "string"
        },
        "config" : {
          "$ref" : "#/definitions/GraphConfig"
        },
        "creationRequestTimestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "vertexIdStrategy" : {
          "type" : "string",
          "enum" : [ "NO_IDS", "KEYS_AS_IDS", "UNSTABLE_GENERATED_IDS", "PARTITIONED_IDS" ]
        },
        "edgeIdStrategy" : {
          "type" : "string",
          "enum" : [ "NO_IDS", "KEYS_AS_IDS", "UNSTABLE_GENERATED_IDS", "PARTITIONED_IDS" ]
        },
        "directed" : {
          "type" : "boolean"
        },
        "vertexProvidersMetaData" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/VertexProviderMetaData"
          }
        },
        "edgeProvidersMetaData" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/EdgeProviderMetaData"
          }
        },
        "graphPinned" : {
          "type" : "boolean"
        },
        "snapshotPinned" : {
          "type" : "boolean"
        },
        "mainVertexProviderMetaData" : {
          "$ref" : "#/definitions/VertexProviderMetaData"
        },
        "mainEdgeProviderMetaData" : {
          "$ref" : "#/definitions/EdgeProviderMetaData"
        },
        "partitioned" : {
          "type" : "boolean"
        }
      }
    },
    "GraphPermissionRequest" : {
      "type" : "object",
      "properties" : {
        "userName" : {
          "type" : "string"
        },
        "roleName" : {
          "type" : "string"
        },
        "permission" : {
          "type" : "string",
          "enum" : [ "NONE", "READ", "WRITE", "EXPORT", "MANAGE" ]
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "GraphPropertyConfig" : {
      "type" : "object",
      "properties" : {
        "inMemory" : {
          "type" : "boolean"
        },
        "external" : {
          "type" : "boolean"
        },
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "name" : {
          "type" : "string"
        },
        "empty" : {
          "type" : "boolean"
        },
        "default" : {
          "type" : "object"
        },
        "field" : {
          "type" : "object"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "column" : {
          "type" : "object"
        },
        "format" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "aggregate" : {
          "type" : "string",
          "enum" : [ "IDENTITY", "GROUP_KEY", "MIN", "MAX", "SUM", "AVG", "CONCAT", "COUNT" ]
        },
        "groupKey" : {
          "type" : "string"
        },
        "dropAfterLoading" : {
          "type" : "boolean"
        },
        "stores" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        },
        "maxDistinctStringsPerPool" : {
          "type" : "integer",
          "format" : "int32"
        },
        "stringPoolingStrategy" : {
          "type" : "string",
          "enum" : [ "INDEXED", "ON_HEAP", "NONE" ]
        },
        "dimension" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sourceColumn" : {
          "type" : "object"
        },
        "parsedDefaultValue" : {
          "type" : "object"
        },
        "stringPoolEnabled" : {
          "type" : "boolean"
        }
      }
    },
    "GraphWise-Inference-Request" : {
      "type" : "object",
      "properties" : {
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "vertex" : {
          "$ref" : "#/definitions/IdTypedObject"
        },
        "verticesWrapped" : {
          "type" : "boolean"
        },
        "modelType" : {
          "type" : "string",
          "enum" : [ "SUPERVISED", "UNSUPERVISED" ]
        },
        "threshold" : {
          "type" : "number",
          "format" : "float"
        },
        "numClusters" : {
          "type" : "integer",
          "format" : "int32"
        },
        "numSamples" : {
          "type" : "integer",
          "format" : "int32"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a inference request for a graphwise model"
    },
    "GraphWiseConvLayerConfig" : {
      "type" : "object",
      "properties" : {
        "numSampledNeighbors" : {
          "type" : "integer",
          "format" : "int32"
        },
        "neighborWeightPropertyName" : {
          "type" : "string"
        },
        "activationFunction" : {
          "type" : "string",
          "enum" : [ "LEAKY_RELU", "RELU", "LINEAR", "TANH" ]
        },
        "weightInitScheme" : {
          "type" : "string",
          "enum" : [ "ZEROS", "ONES", "XAVIER_UNIFORM", "HE", "XAVIER" ]
        }
      }
    },
    "GraphWiseDgiLayerConfig" : {
      "type" : "object",
      "properties" : {
        "corruptionFunction" : {
          "$ref" : "#/definitions/CorruptionFunction"
        },
        "readoutFunction" : {
          "type" : "string",
          "enum" : [ "MEAN" ]
        },
        "discriminator" : {
          "type" : "string",
          "enum" : [ "BILINEAR" ]
        }
      }
    },
    "GraphWisePredictionLayerConfig" : {
      "type" : "object",
      "properties" : {
        "hiddenDimension" : {
          "type" : "integer",
          "format" : "int32"
        },
        "activationFunction" : {
          "type" : "string",
          "enum" : [ "LEAKY_RELU", "RELU", "LINEAR", "TANH" ]
        },
        "weightInitScheme" : {
          "type" : "string",
          "enum" : [ "ZEROS", "ONES", "XAVIER_UNIFORM", "HE", "XAVIER" ]
        }
      }
    },
    "IdTypedObject" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "value" : {
          "type" : "string"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "Iterable" : {
      "type" : "object"
    },
    "IterableListObject" : {
      "type" : "object"
    },
    "IterableObject" : {
      "type" : "object"
    },
    "JoinFramesRequest" : {
      "type" : "object",
      "properties" : {
        "inPlace" : {
          "type" : "boolean"
        },
        "leftFrame" : {
          "$ref" : "#/definitions/PgxId"
        },
        "rightFrame" : {
          "$ref" : "#/definitions/PgxId"
        },
        "leftOn" : {
          "type" : "string"
        },
        "rightOn" : {
          "type" : "string"
        },
        "leftPrefix" : {
          "type" : "string"
        },
        "rightPrefix" : {
          "type" : "string"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "JsonNode" : {
      "type" : "object",
      "properties" : {
        "array" : {
          "type" : "boolean"
        },
        "null" : {
          "type" : "boolean"
        },
        "int" : {
          "type" : "boolean"
        },
        "short" : {
          "type" : "boolean"
        },
        "number" : {
          "type" : "boolean"
        },
        "bigDecimal" : {
          "type" : "boolean"
        },
        "bigInteger" : {
          "type" : "boolean"
        },
        "double" : {
          "type" : "boolean"
        },
        "long" : {
          "type" : "boolean"
        },
        "float" : {
          "type" : "boolean"
        },
        "nodeType" : {
          "type" : "string",
          "enum" : [ "ARRAY", "BINARY", "BOOLEAN", "MISSING", "NULL", "NUMBER", "OBJECT", "POJO", "STRING" ]
        },
        "containerNode" : {
          "type" : "boolean"
        },
        "object" : {
          "type" : "boolean"
        },
        "pojo" : {
          "type" : "boolean"
        },
        "integralNumber" : {
          "type" : "boolean"
        },
        "floatingPointNumber" : {
          "type" : "boolean"
        },
        "textual" : {
          "type" : "boolean"
        },
        "boolean" : {
          "type" : "boolean"
        },
        "binary" : {
          "type" : "boolean"
        },
        "valueNode" : {
          "type" : "boolean"
        },
        "missingNode" : {
          "type" : "boolean"
        }
      }
    },
    "KeyWrapper" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "key" : {
          "type" : "object"
        }
      }
    },
    "LabelMaps" : {
      "type" : "object",
      "properties" : {
        "labelType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "classWeights" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "float"
          }
        },
        "classMap" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      }
    },
    "Link" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string"
        },
        "rel" : {
          "type" : "string"
        },
        "method" : {
          "type" : "string",
          "enum" : [ "PUT", "GET", "DELETE", "POST", "PATCH" ]
        },
        "interaction" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Load-Frame-Request" : {
      "type" : "object",
      "properties" : {
        "configContainer" : {
          "description" : "Table config specifying the frame and its properties. See the table config reference for more information.",
          "$ref" : "#/definitions/EntityProviderConfigContainer"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a load frame request."
    },
    "Load-MlModel-Request-Config" : {
      "type" : "object",
      "properties" : {
        "config" : {
          "$ref" : "#/definitions/ModelLoadingConfiguration"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of an Ml model load request"
    },
    "LossFunction" : {
      "type" : "object",
      "properties" : {
        "lossType" : {
          "type" : "string",
          "enum" : [ "SOFTMAX_CROSS_ENTROPY", "SIGMOID_CROSS_ENTROPY", "DEVNET" ]
        }
      }
    },
    "MapInfo" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "name" : {
          "type" : "string"
        },
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "keyType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "valueType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        }
      }
    },
    "MapProxyResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "proxyId" : {
          "type" : "string"
        },
        "mapName" : {
          "type" : "string"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "keyType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "keyNodeEdgeValueType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "valueType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "valueNodeEdgeValueType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        }
      }
    },
    "MemoryInfo" : {
      "type" : "object",
      "properties" : {
        "freeOnHeapMemory" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalOnHeapMemory" : {
          "type" : "integer",
          "format" : "int32"
        },
        "usedOnHeapMemory" : {
          "type" : "integer",
          "format" : "int32"
        },
        "maxOnHeapMemory" : {
          "type" : "integer",
          "format" : "int32"
        },
        "usedOffHeapMemory" : {
          "type" : "integer",
          "format" : "int32"
        },
        "freeOffHeapMemory" : {
          "type" : "integer",
          "format" : "int32"
        },
        "availableOffHeapMemory" : {
          "type" : "integer",
          "format" : "int32"
        },
        "toString" : {
          "type" : "string"
        }
      }
    },
    "ModelLoadingConfiguration" : {
      "type" : "object",
      "properties" : {
        "modelKind" : {
          "type" : "string",
          "enum" : [ "DEEPWALK", "PG2VEC", "SUPERVISED_GRAPHWISE", "UNSUPERVISED_GRAPHWISE" ]
        },
        "datasource" : {
          "type" : "string",
          "enum" : [ "FILE", "DB" ]
        }
      }
    },
    "ModelStoringConfiguration" : {
      "type" : "object",
      "properties" : {
        "modelKind" : {
          "type" : "string",
          "enum" : [ "DEEPWALK", "PG2VEC", "SUPERVISED_GRAPHWISE", "UNSUPERVISED_GRAPHWISE" ]
        },
        "datasource" : {
          "type" : "string",
          "enum" : [ "FILE", "DB" ]
        },
        "overwrite" : {
          "type" : "boolean"
        }
      }
    },
    "MovePropertyRequest" : {
      "type" : "object",
      "properties" : {
        "entityType" : {
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE", "ROW" ]
        },
        "newName" : {
          "type" : "string"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "MutateGraphRequest" : {
      "type" : "object",
      "properties" : {
        "vertexPropIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "edgePropIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "edgeLabelMapping" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "inPlace" : {
          "type" : "boolean"
        },
        "newGraphName" : {
          "type" : "string"
        },
        "noTrivialVertices" : {
          "type" : "boolean"
        },
        "edgeStrategy" : {
          "$ref" : "#/definitions/EdgeStrategy"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "MutateRequest" : {
      "type" : "object",
      "properties" : {
        "nodePropIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "edgePropIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "newGraphName" : {
          "type" : "string"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "Namespace" : {
      "type" : "object"
    },
    "Operation" : {
      "type" : "object",
      "properties" : {
        "operationType" : {
          "type" : "string",
          "enum" : [ "RootVertexMatch", "ConstantVertexMatch", "Subquery", "SubqueryRootVertexMatch", "NeighborMatch", "Reachability", "ShortestPathFinding", "CommonNeighborMatch", "EdgeMatch", "GroupBy", "Having", "OrderBy", "OrderByLimitOffset", "LimitOffset", "CartesianProduct", "Update", "Delete", "Insert", "Projection" ]
        },
        "children" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Operation"
          }
        },
        "costEstimate" : {
          "type" : "number",
          "format" : "double"
        },
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "totalCostEstimate" : {
          "type" : "number",
          "format" : "double"
        },
        "cardinalityEstimate" : {
          "type" : "number",
          "format" : "double"
        },
        "patternInfo" : {
          "type" : "string"
        }
      }
    },
    "PartitionedGraphConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "name" : {
          "type" : "string"
        },
        "empty" : {
          "type" : "boolean"
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "schema" : {
          "type" : "string"
        },
        "username" : {
          "type" : "string"
        },
        "queries" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "pgViewName" : {
          "type" : "string"
        },
        "vertexProviders" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntityProviderConfig"
          }
        },
        "esIndexName" : {
          "type" : "string"
        },
        "numConnections" : {
          "type" : "integer",
          "format" : "int32"
        },
        "jdbcUrl" : {
          "type" : "string"
        },
        "dataSourceId" : {
          "type" : "string"
        },
        "maxPrefetchedRows" : {
          "type" : "integer",
          "format" : "int32"
        },
        "redactionRules" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxRedactionRuleConfig"
          }
        },
        "edgeProviders" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntityProviderConfig"
          }
        },
        "rulesMapping" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxRedactionRuleMappingConfig"
          }
        },
        "maxBatchSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "esUrl" : {
          "type" : "string"
        },
        "proxyUrl" : {
          "type" : "string"
        },
        "scrollTime" : {
          "type" : "string"
        },
        "vertexIdStrategy" : {
          "type" : "string",
          "enum" : [ "NO_IDS", "KEYS_AS_IDS", "UNSTABLE_GENERATED_IDS", "PARTITIONED_IDS" ]
        },
        "vertexIdType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "loading" : {
          "$ref" : "#/definitions/GraphLoadingConfig"
        },
        "optimizedFor" : {
          "type" : "string",
          "enum" : [ "READ", "UPDATES" ]
        },
        "arrayCompactionThreshold" : {
          "type" : "number",
          "format" : "double"
        },
        "edgeIdStrategy" : {
          "type" : "string",
          "enum" : [ "NO_IDS", "KEYS_AS_IDS", "UNSTABLE_GENERATED_IDS", "PARTITIONED_IDS" ]
        },
        "edgeIdType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "keystoreAlias" : {
          "type" : "string"
        },
        "errorHandling" : {
          "$ref" : "#/definitions/GraphErrorHandlingConfig"
        },
        "localDateFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "timeFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "timestampFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "timeWithTimezoneFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "timestampWithTimezoneFormat" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "vectorComponentDelimiter" : {
          "type" : "string"
        },
        "point2d" : {
          "type" : "string"
        },
        "format" : {
          "type" : "string",
          "enum" : [ "PGB", "EDGE_LIST", "TWO_TABLES", "ADJ_LIST", "FLAT_FILE", "GRAPHML", "PG", "RDF", "CSV" ]
        },
        "vertexProps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GraphPropertyConfig"
          }
        },
        "partitionWhileLoading" : {
          "type" : "string",
          "enum" : [ "BY_LABEL", "NO" ]
        },
        "edgeProps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GraphPropertyConfig"
          }
        },
        "validatedVertexIdStrategy" : {
          "type" : "string",
          "enum" : [ "NO_IDS", "KEYS_AS_IDS", "UNSTABLE_GENERATED_IDS", "PARTITIONED_IDS" ]
        },
        "validatedVertexIdType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "externalStores" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExternalStoreConfig"
          }
        },
        "validatedEdgeIdStrategy" : {
          "type" : "string",
          "enum" : [ "NO_IDS", "KEYS_AS_IDS", "UNSTABLE_GENERATED_IDS", "PARTITIONED_IDS" ]
        },
        "validatedEdgeIdType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "fileFormat" : {
          "type" : "boolean"
        },
        "singleFileFormat" : {
          "type" : "boolean"
        },
        "multipleFileFormat" : {
          "type" : "boolean"
        },
        "loadingOptions" : {
          "$ref" : "#/definitions/GraphLoadingConfig"
        },
        "nodeKeyType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "loadEdgeKeys" : {
          "type" : "boolean"
        },
        "loadVertexKeys" : {
          "type" : "boolean"
        },
        "vertexLabelsLoadingEnabled" : {
          "type" : "boolean"
        },
        "edgeLabelLoadingEnabled" : {
          "type" : "boolean"
        },
        "loadingFilter" : {
          "$ref" : "#/definitions/GraphFilter"
        },
        "vertexPropertyTypes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string",
            "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
          }
        },
        "edgePropertyTypes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string",
            "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
          }
        }
      }
    },
    "Permissions" : {
      "type" : "object",
      "properties" : {
        "generalPermissions" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "NONE", "SESSION_CREATE", "SESSION_NEW_GRAPH", "SESSION_GET_PUBLISHED_GRAPH", "SESSION_ADD_PUBLISHED_GRAPH", "SESSION_COMPILE_ALGORITHM", "SERVER_GET_INFO", "SERVER_MANAGE", "SESSION_READ_MODEL", "SESSION_MODIFY_MODEL" ]
          }
        },
        "graphPermissions" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string",
            "enum" : [ "NONE", "READ", "WRITE", "EXPORT", "MANAGE" ]
          }
        },
        "storagePermissions" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string",
            "enum" : [ "NONE", "READ", "WRITE", "EXPORT", "MANAGE" ]
          }
        }
      }
    },
    "Pg2vecModelMetadata" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "modelKind" : {
          "type" : "string",
          "enum" : [ "DEEPWALK", "PG2VEC", "SUPERVISED_GRAPHWISE", "UNSUPERVISED_GRAPHWISE" ]
        },
        "modelName" : {
          "type" : "string"
        },
        "walkLength" : {
          "type" : "integer",
          "format" : "int32"
        },
        "walksPerVertex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "minWordFrequency" : {
          "type" : "integer",
          "format" : "int32"
        },
        "batchSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "numEpochs" : {
          "type" : "integer",
          "format" : "int32"
        },
        "layerSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "learningRate" : {
          "type" : "number",
          "format" : "double"
        },
        "minLearningRate" : {
          "type" : "number",
          "format" : "double"
        },
        "windowSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "vertexPropertyNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "graphIdPropertyType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "validationFraction" : {
          "type" : "number",
          "format" : "double"
        },
        "useGraphletSize" : {
          "type" : "boolean"
        },
        "seed" : {
          "type" : "integer",
          "format" : "int64"
        },
        "shuffle" : {
          "type" : "boolean"
        },
        "graphletSizePropertyName" : {
          "type" : "string"
        },
        "loss" : {
          "type" : "number",
          "format" : "double"
        },
        "graphLetIdPropertyName" : {
          "type" : "string"
        }
      }
    },
    "PgqlCloneAndExecuteRequest" : {
      "type" : "object",
      "properties" : {
        "pgqlQuery" : {
          "type" : "string"
        },
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "schemaStrictnessMode" : {
          "type" : "boolean"
        },
        "lazyEvaluationMode" : {
          "type" : "boolean"
        },
        "newGraphName" : {
          "type" : "string"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "PgqlExplainRequest" : {
      "type" : "object",
      "properties" : {
        "pgqlQuery" : {
          "type" : "string"
        },
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "PgqlGraphExpansionConfig" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GraphExpansionConfig"
      }, {
        "type" : "object",
        "properties" : {
          "graphConfig" : {
            "readOnly" : true,
            "$ref" : "#/definitions/PartitionedGraphConfig"
          },
          "queries" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "type" : "string"
            }
          },
          "pgViewName" : {
            "type" : "string",
            "readOnly" : true
          },
          "asSnapshot" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "vertexPropertyMergeStrategy" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "KEEP_CURRENT_VALUES", "UPDATE_WITH_NEW_VALUES" ]
          },
          "edgePropertyMergeStrategy" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "KEEP_CURRENT_VALUES", "UPDATE_WITH_NEW_VALUES" ]
          }
        }
      } ]
    },
    "PgqlQueryRequest" : {
      "type" : "object",
      "properties" : {
        "pgqlQuery" : {
          "type" : "string"
        },
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "schemaStrictnessMode" : {
          "type" : "boolean"
        },
        "lazyEvaluationMode" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "PgqlResultElement" : {
      "type" : "object",
      "properties" : {
        "elementType" : {
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE", "INTEGER", "LONG", "DOUBLE", "STRING", "FLOAT", "BOOLEAN", "VERTEX_LABELS", "EDGE_LABEL", "DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "POINT2D", "ARRAY" ]
        },
        "collectionElementType" : {
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE", "INTEGER", "LONG", "DOUBLE", "STRING", "FLOAT", "BOOLEAN", "VERTEX_LABELS", "EDGE_LABEL", "DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "POINT2D", "ARRAY" ]
        },
        "varName" : {
          "type" : "string"
        },
        "vertexEdgeIdType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        }
      }
    },
    "PgqlResultProxyResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "exists" : {
          "type" : "boolean"
        },
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "resultSetId" : {
          "type" : "string"
        },
        "numResults" : {
          "type" : "integer",
          "format" : "int64"
        },
        "graphConfig" : {
          "$ref" : "#/definitions/GraphConfigContainer"
        }
      }
    },
    "PgqlResultSetProxy" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "columnCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "baseUri" : {
          "type" : "string",
          "format" : "uri"
        },
        "results" : {
          "$ref" : "#/definitions/IterableListObject"
        },
        "resultElements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgqlResultElement"
          }
        },
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "numResults" : {
          "type" : "integer",
          "format" : "int64"
        },
        "createPropertyGraphConfig" : {
          "$ref" : "#/definitions/GraphConfig"
        }
      }
    },
    "PgxConfig" : {
      "type" : "object",
      "properties" : {
        "runtimeConfig" : {
          "$ref" : "#/definitions/RuntimeConfig"
        },
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "executablePath" : {
          "type" : "string"
        },
        "tmpDir" : {
          "type" : "string"
        },
        "udfConfigDirectory" : {
          "type" : "string"
        },
        "intervalToPollMax" : {
          "type" : "integer",
          "format" : "int32"
        },
        "enableGraphLoadingCache" : {
          "type" : "boolean"
        },
        "basicSchedulerConfig" : {
          "$ref" : "#/definitions/BasicSchedulerConfig"
        },
        "enterpriseSchedulerConfig" : {
          "$ref" : "#/definitions/EnterpriseSchedulerConfig"
        },
        "minFetchIntervalSec" : {
          "type" : "integer",
          "format" : "int32"
        },
        "minUpdateIntervalSec" : {
          "type" : "integer",
          "format" : "int32"
        },
        "inPlaceUpdateConsistencyModel" : {
          "type" : "string",
          "enum" : [ "CANCEL_TASKS", "ALLOW_INCONSISTENCIES" ]
        },
        "minArrayCompactionThreshold" : {
          "type" : "number",
          "format" : "double"
        },
        "maxSnapshotCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "javaHomeDir" : {
          "type" : "string"
        },
        "enableGmCompiler" : {
          "type" : "boolean"
        },
        "graphAlgorithmLanguage" : {
          "type" : "string",
          "enum" : [ "GM", "JAVA" ]
        },
        "unsafeAllowForeignSyntax" : {
          "type" : "boolean"
        },
        "allowUserAutoRefresh" : {
          "type" : "boolean"
        },
        "ignoreIncompatibleBackendOperations" : {
          "type" : "boolean"
        },
        "allowOverrideSchedulingInformation" : {
          "type" : "boolean"
        },
        "hostnames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "builtinsPath" : {
          "type" : "string"
        },
        "logConfigure" : {
          "type" : "string"
        },
        "commonLogConfigure" : {
          "type" : "string"
        },
        "logStdRedirect" : {
          "type" : "string"
        },
        "javaClassPath" : {
          "type" : "string"
        },
        "ifInfiniband" : {
          "type" : "string"
        },
        "ifEthernet" : {
          "type" : "string"
        },
        "largeBufCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "largeBufSizeKb" : {
          "type" : "integer",
          "format" : "int32"
        },
        "partitioningShuffleVertices" : {
          "type" : "boolean"
        },
        "partitioningStrategy" : {
          "type" : "string"
        },
        "partitioningIgnoreGhostnodes" : {
          "type" : "boolean"
        },
        "ghostMinNeighbors" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ghostMaxNodeCounts" : {
          "type" : "integer",
          "format" : "int32"
        },
        "procId" : {
          "type" : "integer",
          "format" : "int32"
        },
        "resourceMonitor" : {
          "type" : "integer",
          "format" : "int32"
        },
        "debugServer" : {
          "type" : "string"
        },
        "instanceName" : {
          "type" : "string"
        },
        "enableSecureHandshake" : {
          "type" : "boolean"
        },
        "secureHandshakeSecretFile" : {
          "type" : "string"
        },
        "backendWrapper" : {
          "type" : "string"
        },
        "handshakePort" : {
          "type" : "integer",
          "format" : "int32"
        },
        "enableCsrfTokenChecks" : {
          "type" : "boolean"
        },
        "allowedRemoteLoadingLocations" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "initPgqlOnStartup" : {
          "type" : "boolean"
        },
        "maxHttpClientRequestSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pgxRealm" : {
          "$ref" : "#/definitions/RealmConfig"
        },
        "fileLocations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AuthorizationLocationConfig"
          }
        },
        "authorizationSessionCreateAllowAll" : {
          "type" : "boolean"
        },
        "authorization" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AuthorizationEntityConfig"
          }
        },
        "enableMemoryLimitsChecks" : {
          "type" : "boolean"
        },
        "dataMemoryLimits" : {
          "$ref" : "#/definitions/DataMemoryLimitsConfig"
        },
        "enableShutdownCleanupHook" : {
          "type" : "boolean"
        },
        "sessionIdleTimeoutSecs" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sessionTaskTimeoutSecs" : {
          "type" : "integer",
          "format" : "int32"
        },
        "allowIdleTimeoutOverwrite" : {
          "type" : "boolean"
        },
        "allowTaskTimeoutOverwrite" : {
          "type" : "boolean"
        },
        "maxActiveSessions" : {
          "type" : "integer",
          "format" : "int32"
        },
        "maxQueueSizePerSession" : {
          "type" : "integer",
          "format" : "int32"
        },
        "adminRequestCacheTimeout" : {
          "type" : "integer",
          "format" : "int32"
        },
        "launchWatchdogs" : {
          "type" : "boolean"
        },
        "strictMode" : {
          "type" : "boolean"
        },
        "preloadGraphs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PreloadGraphConfig"
          }
        },
        "memoryCleanupInterval" : {
          "type" : "integer",
          "format" : "int32"
        },
        "releaseMemoryThreshold" : {
          "type" : "number",
          "format" : "double"
        },
        "readinessMemoryUsageRatio" : {
          "type" : "number",
          "format" : "double"
        },
        "numSpinLocks" : {
          "type" : "integer",
          "format" : "int32"
        },
        "runningMemoryUsageRatio" : {
          "type" : "number",
          "format" : "double"
        },
        "explicitSpinLocks" : {
          "type" : "boolean"
        },
        "scheduler" : {
          "type" : "string",
          "enum" : [ "BASIC_SCHEDULER", "ENTERPRISE_SCHEDULER", "LOW_LATENCY_SCHEDULER" ]
        },
        "taskLength" : {
          "type" : "integer",
          "format" : "int32"
        },
        "smallTaskLength" : {
          "type" : "integer",
          "format" : "int32"
        },
        "msBfsFrontierTypeStrategy" : {
          "type" : "string",
          "enum" : [ "AUTO_GROW", "SHORT", "INT" ]
        },
        "bfsThresholdSingleThreaded" : {
          "type" : "integer",
          "format" : "int32"
        },
        "bfsThresholdReadBased" : {
          "type" : "integer",
          "format" : "int32"
        },
        "bfsIterateQueTaskSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "bfsThresholdParentReadBased" : {
          "type" : "number",
          "format" : "double"
        },
        "dfsThresholdLarge" : {
          "type" : "integer",
          "format" : "int32"
        },
        "cniStopRecursionDefault" : {
          "type" : "integer",
          "format" : "int32"
        },
        "cniSmallDefault" : {
          "type" : "integer",
          "format" : "int32"
        },
        "cniDiffFactorDefault" : {
          "type" : "integer",
          "format" : "int32"
        },
        "largeArrayThreshold" : {
          "type" : "integer",
          "format" : "int32"
        },
        "maxOffHeapSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "characterSet" : {
          "type" : "string"
        },
        "randomGeneratorStrategy" : {
          "type" : "string",
          "enum" : [ "NON_DETERMINISTIC", "DETERMINISTIC" ]
        },
        "randomSeed" : {
          "type" : "integer",
          "format" : "int64"
        },
        "patternMatchingSupernodeCacheThreshold" : {
          "type" : "integer",
          "format" : "int32"
        },
        "useIndexForReachabilityQueries" : {
          "type" : "string",
          "enum" : [ "AUTO", "OFF", "FORCE" ]
        },
        "revisitThreshold" : {
          "type" : "integer",
          "format" : "int32"
        },
        "enterpriseSchedulerFlags" : {
          "$ref" : "#/definitions/EnterpriseSchedulerFlagsConfig"
        },
        "memoryAllocator" : {
          "type" : "string",
          "enum" : [ "BASIC_ALLOCATOR", "ENTERPRISE_ALLOCATOR" ]
        },
        "maxDistinctStringsPerPool" : {
          "type" : "integer",
          "format" : "int32"
        },
        "stringPoolingStrategy" : {
          "type" : "string",
          "enum" : [ "INDEXED", "ON_HEAP", "NONE" ]
        },
        "poolingFactor" : {
          "type" : "number",
          "format" : "double"
        },
        "graphValidationLevel" : {
          "type" : "string",
          "enum" : [ "LOW", "HIGH" ]
        },
        "backendFields" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "ENABLE_GRAPH_LOADING_CACHE", "BASIC_SCHEDULER_CONFIG", "ENTERPRISE_SCHEDULER_CONFIG", "MIN_FETCH_INTERVAL_SEC", "MIN_UPDATE_INTERVAL_SEC", "IN_PLACE_UPDATE_CONSISTENCY_MODEL", "MIN_ARRAY_COMPACTION_THRESHOLD", "MAX_SNAPSHOT_COUNT", "JAVA_HOME_DIR", "ENABLE_GM_COMPILER", "GRAPH_ALGORITHM_LANGUAGE", "UNSAFE_ALLOW_FOREIGN_SYNTAX", "ALLOW_USER_AUTO_REFRESH", "IGNORE_INCOMPATIBLE_BACKEND_OPERATIONS", "ALLOW_OVERRIDE_SCHEDULING_INFORMATION", "UDF_CONFIG_DIRECTORY", "HOSTNAMES", "EXECUTABLE_PATH", "BUILTINS_PATH", "LOG_CONFIGURE", "COMMON_LOG_CONFIGURE", "LOG_STD_REDIRECT", "JAVA_CLASS_PATH", "USE_INFINIBAND", "IF_INFINIBAND", "IF_ETHERNET", "LARGE_BUF_COUNT", "LARGE_BUF_SIZE_KB", "PARTITIONING_SHUFFLE_VERTICES", "PARTITIONING_STRATEGY", "PARTITIONING_IGNORE_GHOSTNODES", "GHOST_MIN_NEIGHBORS", "GHOST_MAX_NODE_COUNTS", "PROC_ID", "RESOURCE_MONITOR", "DEBUG_SERVER", "INSTANCE_NAME", "ENABLE_SECURE_HANDSHAKE", "SECURE_HANDSHAKE_SECRET_FILE", "BACKEND_WRAPPER", "HANDSHAKE_PORT", "ENABLE_CSRF_TOKEN_CHECKS", "TMP_DIR", "ALLOWED_REMOTE_LOADING_LOCATIONS", "INIT_PGQL_ON_STARTUP", "MAX_HTTP_CLIENT_REQUEST_SIZE", "PGX_REALM", "FILE_LOCATIONS", "AUTHORIZATION_SESSION_CREATE_ALLOW_ALL", "AUTHORIZATION", "ENABLE_MEMORY_LIMITS_CHECKS", "DATA_MEMORY_LIMITS", "ENABLE_SHUTDOWN_CLEANUP_HOOK", "SESSION_IDLE_TIMEOUT_SECS", "SESSION_TASK_TIMEOUT_SECS", "ALLOW_IDLE_TIMEOUT_OVERWRITE", "ALLOW_TASK_TIMEOUT_OVERWRITE", "MAX_ACTIVE_SESSIONS", "MAX_QUEUE_SIZE_PER_SESSION", "INTERVAL_TO_POLL_MAX", "ADMIN_REQUEST_CACHE_TIMEOUT", "LAUNCH_WATCHDOGS", "STRICT_MODE", "PRELOAD_GRAPHS", "MEMORY_CLEANUP_INTERVAL", "RELEASE_MEMORY_THRESHOLD", "READINESS_MEMORY_USAGE_RATIO", "RUNNING_MEMORY_USAGE_RATIO", "NUM_SPIN_LOCKS", "EXPLICIT_SPIN_LOCKS", "SCHEDULER", "TASK_LENGTH", "SMALL_TASK_LENGTH", "MS_BFS_FRONTIER_TYPE_STRATEGY", "BFS_THRESHOLD_SINGLE_THREADED", "BFS_THRESHOLD_READ_BASED", "BFS_ITERATE_QUE_TASK_SIZE", "BFS_THRESHOLD_PARENT_READ_BASED", "DFS_THRESHOLD_LARGE", "CNI_STOP_RECURSION_DEFAULT", "CNI_SMALL_DEFAULT", "CNI_DIFF_FACTOR_DEFAULT", "LARGE_ARRAY_THRESHOLD", "MAX_OFF_HEAP_SIZE", "CHARACTER_SET", "PARALLELISM", "RANDOM_GENERATOR_STRATEGY", "RANDOM_SEED", "PATTERN_MATCHING_SUPERNODE_CACHE_THRESHOLD", "USE_INDEX_FOR_REACHABILITY_QUERIES", "REVISIT_THRESHOLD", "ENTERPRISE_SCHEDULER_FLAGS", "MEMORY_ALLOCATOR", "MAX_DISTINCT_STRINGS_PER_POOL", "STRING_POOLING_STRATEGY", "USE_MEMORY_MAPPER_FOR_STORING_PGB", "USE_MEMORY_MAPPER_FOR_READING_PGB", "POOLING_FACTOR", "GRAPH_VALIDATION_LEVEL" ]
          }
        },
        "parallelism" : {
          "type" : "integer",
          "format" : "int32"
        },
        "smConfig" : {
          "type" : "boolean"
        },
        "userPermissionMapping" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Permissions"
          }
        },
        "rolePermissionMapping" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Permissions"
          }
        },
        "distConfig" : {
          "type" : "boolean"
        },
        "userMaxMemoryLimits" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/DataMemoryLimit"
          }
        },
        "roleMaxMemoryLimits" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/DataMemoryLimit"
          }
        }
      }
    },
    "PgxId" : {
      "type" : "object"
    },
    "PgxRedactionRuleConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "properties" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "label" : {
          "type" : "string"
        },
        "ruleName" : {
          "type" : "string"
        },
        "redactVertex" : {
          "type" : "string"
        },
        "showFrontierVertex" : {
          "$ref" : "#/definitions/FrontierRedactedVerticesConfig"
        },
        "redactEdge" : {
          "type" : "string"
        },
        "redactVertexProperties" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PropertiesRedactionRuleConfig"
          }
        },
        "redactEdgeProperties" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PropertiesRedactionRuleConfig"
          }
        },
        "withVisibleProperties" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "ruleTrigger" : {
          "type" : "string"
        }
      }
    },
    "PgxRedactionRuleMappingConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "roles" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "usersExcluded" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "users" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "rolesExcluded" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "ruleName" : {
          "type" : "string"
        }
      }
    },
    "PinGraphRequest" : {
      "type" : "object",
      "properties" : {
        "target" : {
          "type" : "string",
          "enum" : [ "GRAPH" ]
        },
        "value" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "PoolInfo" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "SERVER_THREAD", "FAST_TRACK_ANALYSIS_POOL", "ANALYSIS_POOL", "IO_POOL" ]
        },
        "parallelism" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sessionIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "busy" : {
          "type" : "boolean"
        },
        "cpuTime" : {
          "type" : "integer",
          "format" : "int32"
        },
        "aliveTime" : {
          "type" : "integer",
          "format" : "int32"
        },
        "busyTime" : {
          "type" : "integer",
          "format" : "int32"
        },
        "toString" : {
          "type" : "string"
        }
      }
    },
    "PoolRequest" : {
      "type" : "object",
      "properties" : {
        "poolType" : {
          "type" : "string",
          "enum" : [ "SERVER_THREAD", "FAST_TRACK_ANALYSIS_POOL", "ANALYSIS_POOL", "IO_POOL" ]
        },
        "parallelism" : {
          "type" : "integer",
          "format" : "int32"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "PreloadGraphConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "name" : {
          "type" : "string"
        },
        "empty" : {
          "type" : "boolean"
        },
        "path" : {
          "type" : "string"
        },
        "publish" : {
          "type" : "boolean"
        },
        "publishWithSnapshots" : {
          "type" : "boolean"
        }
      }
    },
    "PrepareStatementRequest" : {
      "type" : "object",
      "properties" : {
        "queryWithBindVariables" : {
          "type" : "string"
        },
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "PreparedStatementResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "preparedStatementId" : {
          "type" : "string"
        },
        "bindVariableCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "selectQuery" : {
          "type" : "boolean"
        },
        "statementType" : {
          "type" : "string",
          "enum" : [ "SELECT", "GRAPH_MODIFY", "CREATE_PROPERTY_GRAPH", "DROP_PROPERTY_GRAPH", "CREATE_EXTERNAL_SCHEMA", "DROP_EXTERNAL_SCHEMA" ]
        },
        "graphConfig" : {
          "$ref" : "#/definitions/GraphConfigContainer"
        }
      }
    },
    "PropertiesRedactionRuleConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "properties" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "label" : {
          "type" : "string"
        },
        "ruleTrigger" : {
          "type" : "string"
        }
      }
    },
    "Property" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "dimension" : {
          "type" : "integer",
          "format" : "int32"
        },
        "propertyId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "name" : {
          "type" : "string"
        },
        "entityType" : {
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE", "ROW" ]
        },
        "type" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "namespace" : {
          "$ref" : "#/definitions/Namespace"
        },
        "transient" : {
          "type" : "boolean"
        }
      }
    },
    "PropertyInfo" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "nodeProperty" : {
          "type" : "boolean"
        },
        "pprivate" : {
          "type" : "boolean"
        },
        "memSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "toString" : {
          "type" : "string"
        }
      }
    },
    "PropertyMetaData" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "id" : {
          "type" : "string"
        },
        "propertyType" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "dimension" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "transient" : {
          "type" : "boolean"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "propertyId" : {
          "$ref" : "#/definitions/PgxId"
        }
      }
    },
    "PropertyProxyResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "proxyId" : {
          "type" : "string"
        },
        "size" : {
          "type" : "integer",
          "format" : "int64"
        },
        "keyType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "valueType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "nodeEdgeValueType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "dimension" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PropertyTypedObject" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "value" : {
          "type" : "string"
        },
        "isVector" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "PropertyValue" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "value" : {
          "type" : "object"
        },
        "valueType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "nodeEdgeValueType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "key" : {
          "type" : "object"
        },
        "keyWrapped" : {
          "type" : "boolean"
        },
        "valueWrapped" : {
          "type" : "boolean"
        },
        "vector" : {
          "type" : "boolean"
        }
      }
    },
    "ProviderLoadingConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "filter" : {
          "type" : "string"
        },
        "groupingBy" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "strictMode" : {
          "type" : "boolean"
        },
        "createKeyMapping" : {
          "type" : "boolean"
        }
      }
    },
    "PublishGraphRequest" : {
      "type" : "object",
      "properties" : {
        "vertexPropIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "edgePropIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "withSnapshots" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "RealmConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "options" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "implementation" : {
          "type" : "string"
        }
      }
    },
    "RefreshGraphRequest" : {
      "type" : "object",
      "properties" : {
        "blockIfFull" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "RemoveRedactionRuleRequest" : {
      "type" : "object",
      "properties" : {
        "ruleConfig" : {
          "$ref" : "#/definitions/PgxRedactionRuleConfig"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "USER", "ROLE" ]
        },
        "names" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "RenameGraphRequest" : {
      "type" : "object",
      "properties" : {
        "newGraphName" : {
          "type" : "string"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "RunAnalysisRequest" : {
      "type" : "object",
      "properties" : {
        "args" : {
          "type" : "array",
          "description" : "Argument array to pass to the analysis as arguments.",
          "items" : {
            "$ref" : "#/definitions/Argument"
          }
        },
        "expectedReturnType" : {
          "type" : "string",
          "description" : "Return type we expect.",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "STRING", "DATE", "VOID" ]
        },
        "workloadCharacteristics" : {
          "description" : "Characteristics to use when executing the analysis.",
          "$ref" : "#/definitions/WorkloadCharacteristicSet"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "RuntimeConfig" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "leftoverValues" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "empty" : {
          "type" : "boolean"
        },
        "numSpinLocks" : {
          "type" : "integer",
          "format" : "int32"
        },
        "explicitSpinLocks" : {
          "type" : "boolean"
        },
        "scheduler" : {
          "type" : "string",
          "enum" : [ "BASIC_SCHEDULER", "ENTERPRISE_SCHEDULER", "LOW_LATENCY_SCHEDULER" ]
        },
        "taskLength" : {
          "type" : "integer",
          "format" : "int32"
        },
        "smallTaskLength" : {
          "type" : "integer",
          "format" : "int32"
        },
        "msBfsFrontierTypeStrategy" : {
          "type" : "string",
          "enum" : [ "AUTO_GROW", "SHORT", "INT" ]
        },
        "bfsThresholdSingleThreaded" : {
          "type" : "integer",
          "format" : "int32"
        },
        "bfsThresholdReadBased" : {
          "type" : "integer",
          "format" : "int32"
        },
        "bfsIterateQueTaskSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "bfsThresholdParentReadBased" : {
          "type" : "number",
          "format" : "double"
        },
        "dfsThresholdLarge" : {
          "type" : "integer",
          "format" : "int32"
        },
        "cniStopRecursionDefault" : {
          "type" : "integer",
          "format" : "int32"
        },
        "cniSmallDefault" : {
          "type" : "integer",
          "format" : "int32"
        },
        "cniDiffFactorDefault" : {
          "type" : "integer",
          "format" : "int32"
        },
        "largeArrayThreshold" : {
          "type" : "integer",
          "format" : "int32"
        },
        "maxOffHeapSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "characterSet" : {
          "type" : "string"
        },
        "randomGeneratorStrategy" : {
          "type" : "string",
          "enum" : [ "NON_DETERMINISTIC", "DETERMINISTIC" ]
        },
        "randomSeed" : {
          "type" : "integer",
          "format" : "int64"
        },
        "patternMatchingSupernodeCacheThreshold" : {
          "type" : "integer",
          "format" : "int32"
        },
        "useIndexForReachabilityQueries" : {
          "type" : "string",
          "enum" : [ "AUTO", "OFF", "FORCE" ]
        },
        "revisitThreshold" : {
          "type" : "integer",
          "format" : "int32"
        },
        "enterpriseSchedulerFlags" : {
          "$ref" : "#/definitions/EnterpriseSchedulerFlagsConfig"
        },
        "memoryAllocator" : {
          "type" : "string",
          "enum" : [ "BASIC_ALLOCATOR", "ENTERPRISE_ALLOCATOR" ]
        },
        "maxDistinctStringsPerPool" : {
          "type" : "integer",
          "format" : "int32"
        },
        "stringPoolingStrategy" : {
          "type" : "string",
          "enum" : [ "INDEXED", "ON_HEAP", "NONE" ]
        },
        "poolingFactor" : {
          "type" : "number",
          "format" : "double"
        },
        "graphValidationLevel" : {
          "type" : "string",
          "enum" : [ "LOW", "HIGH" ]
        },
        "parallelism" : {
          "type" : "integer",
          "format" : "int32"
        },
        "stringPoolEnabled" : {
          "type" : "boolean"
        }
      }
    },
    "ScalarValue" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "value" : {
          "type" : "object"
        },
        "valueType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "VERTEX", "EDGE", "STRING", "LOCAL_DATE", "TIME", "TIMESTAMP", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE", "RO_STRING_SET", "POINT2D" ]
        },
        "nodeEdgeValueType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "valueWrapped" : {
          "type" : "boolean"
        },
        "vector" : {
          "type" : "boolean"
        }
      }
    },
    "SelectFrameRequest" : {
      "type" : "object",
      "properties" : {
        "inPlace" : {
          "type" : "boolean"
        },
        "columnMappings" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "SerializedPathProxy" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "exists" : {
          "type" : "boolean"
        },
        "nodeType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "wrappedVertices" : {
          "type" : "boolean"
        },
        "serializedNodes" : {
          "type" : "string"
        },
        "wrappedEdges" : {
          "type" : "boolean"
        },
        "serializedEdges" : {
          "type" : "string"
        },
        "edgeCosts" : {
          "type" : "array",
          "items" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "cost" : {
          "type" : "number",
          "format" : "double"
        },
        "pathLength" : {
          "type" : "integer",
          "format" : "int32"
        },
        "proxyUuid" : {
          "type" : "string"
        }
      }
    },
    "SessionInfo" : {
      "type" : "object",
      "properties" : {
        "sessionId" : {
          "type" : "string"
        },
        "source" : {
          "type" : "string"
        },
        "taskTimeoutMs" : {
          "type" : "integer",
          "format" : "int64"
        },
        "idleTimeoutMs" : {
          "type" : "integer",
          "format" : "int64"
        },
        "sharedGraphs" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "privateGraphs" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "privateMemoryUsage" : {
          "type" : "integer",
          "format" : "int64"
        },
        "sharedMemoryUsage" : {
          "type" : "integer",
          "format" : "int64"
        },
        "alive" : {
          "type" : "integer",
          "format" : "int32"
        },
        "totalAnalysisTime" : {
          "type" : "integer",
          "format" : "int32"
        },
        "toString" : {
          "type" : "string"
        }
      }
    },
    "SetScalarValueRequest" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "$ref" : "#/definitions/ScalarValue"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "SortByDegreeRequest" : {
      "type" : "object",
      "properties" : {
        "nodePropIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "edgePropIds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "newGraphName" : {
          "type" : "string"
        },
        "ascending" : {
          "type" : "boolean"
        },
        "useOutDegree" : {
          "type" : "boolean"
        },
        "inPlace" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "Store-MlModel-Request" : {
      "type" : "object",
      "properties" : {
        "config" : {
          "$ref" : "#/definitions/ModelStoringConfiguration"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a MlModel storing request"
    },
    "StoreFrameRequest" : {
      "type" : "object",
      "properties" : {
        "configContainer" : {
          "description" : "Table config specifying the frame and its properties. See the table config reference for more information.",
          "$ref" : "#/definitions/EntityProviderConfigContainer"
        },
        "overwrite" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "StoreGraphRequest" : {
      "type" : "object",
      "properties" : {
        "graphConfig" : {
          "description" : "Graph config specifying the graph and its properties. See the graph config reference for more information.",
          "$ref" : "#/definitions/GraphConfigContainer"
        },
        "overwrite" : {
          "type" : "boolean"
        },
        "vertexProvidersToStore" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "edgeProvidersToStore" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "SupervisedGraphWise-Inference-Request" : {
      "type" : "object",
      "properties" : {
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "inferenceType" : {
          "type" : "string",
          "enum" : [ "INFER_EMBEDDINGS", "INFER_LABELS", "EVALUATE_LABELS", "INFER_LOGITS" ]
        },
        "vertices" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IdTypedObject"
          }
        },
        "verticesWrapped" : {
          "type" : "boolean"
        },
        "threshold" : {
          "type" : "number",
          "format" : "float"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a inference request for a supervised graphwise model"
    },
    "SupervisedGraphWiseModelConfig" : {
      "type" : "object",
      "required" : [ "backend", "batchSize", "convLayerConfigs", "embeddingDim", "fitted", "inputFeatureDim", "labelMaps", "learningRate", "normalize", "numEpochs", "predictionLayerConfigs", "seed", "shuffle", "standardize", "trainingLoss", "vertexInputPropertyNames", "vertexTargetPropertyName" ],
      "properties" : {
        "batchSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "numEpochs" : {
          "type" : "integer",
          "format" : "int32"
        },
        "learningRate" : {
          "type" : "number",
          "format" : "double"
        },
        "embeddingDim" : {
          "type" : "integer",
          "format" : "int32"
        },
        "seed" : {
          "type" : "integer",
          "format" : "int32"
        },
        "convLayerConfigs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GraphWiseConvLayerConfig"
          }
        },
        "standardize" : {
          "type" : "boolean"
        },
        "shuffle" : {
          "type" : "boolean"
        },
        "vertexInputPropertyNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "edgeInputPropertyNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "fitted" : {
          "type" : "boolean"
        },
        "trainingLoss" : {
          "type" : "number",
          "format" : "double"
        },
        "inputFeatureDim" : {
          "type" : "integer",
          "format" : "int32"
        },
        "edgeInputFeatureDim" : {
          "type" : "integer",
          "format" : "int32"
        },
        "lossFunctionClass" : {
          "$ref" : "#/definitions/LossFunction"
        },
        "batchGenerator" : {
          "$ref" : "#/definitions/BatchGenerator"
        },
        "predictionLayerConfigs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GraphWisePredictionLayerConfig"
          }
        },
        "normalize" : {
          "type" : "boolean"
        },
        "vertexTargetPropertyName" : {
          "type" : "string"
        },
        "labelMaps" : {
          "$ref" : "#/definitions/LabelMaps"
        },
        "backend" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "TORCH" ]
        }
      }
    },
    "SupervisedGraphWiseModelMetadata" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "modelKind" : {
          "type" : "string",
          "enum" : [ "DEEPWALK", "PG2VEC", "SUPERVISED_GRAPHWISE", "UNSUPERVISED_GRAPHWISE" ]
        },
        "modelName" : {
          "type" : "string"
        },
        "config" : {
          "$ref" : "#/definitions/SupervisedGraphWiseModelConfig"
        }
      }
    },
    "TypedMapEntry" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "$ref" : "#/definitions/PropertyTypedObject"
        },
        "value" : {
          "$ref" : "#/definitions/PropertyTypedObject"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "UnionFramesRequest" : {
      "type" : "object",
      "properties" : {
        "inPlace" : {
          "type" : "boolean"
        },
        "frameA" : {
          "$ref" : "#/definitions/PgxId"
        },
        "frameB" : {
          "$ref" : "#/definitions/PgxId"
        },
        "otherFrames" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PgxId"
          }
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "UnpinGraphRequest" : {
      "type" : "object",
      "properties" : {
        "graphName" : {
          "type" : "string"
        },
        "creationTimestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "UnsafeHttpMethodRequest" : {
      "type" : "object",
      "properties" : {
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      }
    },
    "UnsupervisedGraphWise-Inference-Request" : {
      "type" : "object",
      "properties" : {
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "inferenceType" : {
          "type" : "string",
          "enum" : [ "INFER_EMBEDDINGS" ]
        },
        "vertices" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IdTypedObject"
          }
        },
        "verticesWrapped" : {
          "type" : "boolean"
        },
        "_csrf_token" : {
          "type" : "string",
          "description" : "CSRF token"
        }
      },
      "description" : "Holds the parameters of a inference request for a unsupervised graphwise model"
    },
    "UnsupervisedGraphWiseModelConfig" : {
      "type" : "object",
      "required" : [ "backend", "batchSize", "convLayerConfigs", "dgiLayerConfig", "embeddingDim", "fitted", "inputFeatureDim", "learningRate", "lossFunction", "numEpochs", "seed", "shuffle", "standardize", "trainingLoss", "vertexInputPropertyNames" ],
      "properties" : {
        "batchSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "numEpochs" : {
          "type" : "integer",
          "format" : "int32"
        },
        "learningRate" : {
          "type" : "number",
          "format" : "double"
        },
        "embeddingDim" : {
          "type" : "integer",
          "format" : "int32"
        },
        "seed" : {
          "type" : "integer",
          "format" : "int32"
        },
        "convLayerConfigs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GraphWiseConvLayerConfig"
          }
        },
        "standardize" : {
          "type" : "boolean"
        },
        "shuffle" : {
          "type" : "boolean"
        },
        "vertexInputPropertyNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "edgeInputPropertyNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "fitted" : {
          "type" : "boolean"
        },
        "trainingLoss" : {
          "type" : "number",
          "format" : "double"
        },
        "inputFeatureDim" : {
          "type" : "integer",
          "format" : "int32"
        },
        "lossFunction" : {
          "type" : "string",
          "enum" : [ "SIGMOID_CROSS_ENTROPY" ]
        },
        "dgiLayerConfig" : {
          "$ref" : "#/definitions/GraphWiseDgiLayerConfig"
        },
        "backend" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "TORCH" ]
        },
        "edgeInputFeatureDim" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "UnsupervisedGraphWiseModelMetadata" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "modelKind" : {
          "type" : "string",
          "enum" : [ "DEEPWALK", "PG2VEC", "SUPERVISED_GRAPHWISE", "UNSUPERVISED_GRAPHWISE" ]
        },
        "modelName" : {
          "type" : "string"
        },
        "config" : {
          "$ref" : "#/definitions/UnsupervisedGraphWiseModelConfig"
        }
      }
    },
    "ValueWrapper" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "value" : {
          "type" : "object"
        }
      }
    },
    "VersionInfo" : {
      "type" : "object",
      "properties" : {
        "commit" : {
          "type" : "string"
        },
        "pgqlVersion" : {
          "type" : "string"
        },
        "release_version" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "server_type" : {
          "type" : "string"
        },
        "built" : {
          "type" : "string"
        }
      }
    },
    "Vertex" : {
      "type" : "object",
      "properties" : {
        "graphId" : {
          "readOnly" : true,
          "$ref" : "#/definitions/PgxId"
        },
        "tableName" : {
          "type" : "string",
          "readOnly" : true
        },
        "idType" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "key" : {
          "type" : "object",
          "readOnly" : true
        },
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "entityType" : {
          "type" : "string",
          "enum" : [ "VERTEX", "EDGE", "ROW" ]
        }
      }
    },
    "VertexFrameDeclaration" : {
      "type" : "object",
      "properties" : {
        "vertexTableName" : {
          "type" : "string"
        },
        "keyColumnName" : {
          "type" : "string"
        },
        "frameMetaData" : {
          "$ref" : "#/definitions/FrameMetaData"
        }
      }
    },
    "VertexLabels" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "graphId" : {
          "$ref" : "#/definitions/PgxId"
        },
        "vertexKey" : {
          "type" : "object"
        },
        "idType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "labels" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "VertexProviderMetaData" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "idType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "labels" : {
          "type" : "array",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PropertyMetaData"
          }
        },
        "edgeProviderNamesWhereSource" : {
          "type" : "array",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "edgeProviderNamesWhereDestination" : {
          "type" : "array",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        }
      }
    },
    "VertexTable" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "metaData" : {
          "$ref" : "#/definitions/VertexProviderMetaData"
        },
        "providerLabels" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "keyPropertyName" : {
          "type" : "string"
        },
        "entityKeyType" : {
          "type" : "string",
          "enum" : [ "INTEGER", "LONG", "STRING" ]
        },
        "isIdentityKeyMapping" : {
          "type" : "boolean"
        },
        "vertexLabels" : {
          "$ref" : "#/definitions/Property"
        },
        "vertexProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Property"
          }
        },
        "transient" : {
          "type" : "boolean"
        }
      }
    },
    "WorkloadCharacteristicSet" : {
      "type" : "object"
    }
  }
}